using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Rawr
{
    /*  Here are the values data-mined from build 15799 and imported into SimulationCraft:
     * 
     * https://code.google.com/p/simulationcraft/source/browse/branches/mop/engine/dbc/sc_scale_data.inc?r=12572

        Base Chance to Melee Crit%: 2.9219999909401%
        Base Chance to Spell Crit%: 2.2010000422597%

        Spell Scaling Multiplier: 1004.489990234375000 (level 80 value is 900.120300292968750. i.e. Level 85 base damage of abilities is 1004.49/900.12 or *1.12 more than at level 80 and so is the damage range.)
        Agi to +Melee Crit%: 0.0030780898669%
        Int to +Spell Crit%: 0.0015410500055%
        Int/Spirit regen coefficient: 0.003345000091940
     */
    public static class BaseCombatRating
    {
        #region Combat ratings for levels 1 - 90, wow build 15508
        #region Dodge Rating Multiplier
        private static readonly float[] _dodgeRatingMultiplier = new float[]
        {
              0.796153187751770f,    0.796153068542480f,    0.796153068542480f,    0.796153068542480f,    0.796152949333191f,
              0.796153128147125f,    0.796153068542480f,    0.796153008937836f,    0.796153008937836f,    0.796153128147125f,
              1.194230556488037f,    1.592308163642883f,    1.990383744239807f,    2.388461112976074f,    2.786539077758789f,
              3.184616804122925f,    3.582691907882690f,    3.980769872665405f,    4.378847599029541f,    4.776922702789307f,
              5.175000190734863f,    5.573077678680420f,    5.971153259277344f,    6.369230747222900f,    6.767308712005615f,
              7.165383338928223f,    7.563461780548096f,    7.961538791656494f,    8.359617233276367f,    8.757692337036133f,
              9.155768394470215f,    9.553846359252930f,    9.951925277709961f,   10.350001335144043f,   10.748077392578125f,
             11.146153450012207f,   11.544231414794922f,   11.942307472229004f,   12.340383529663086f,   12.738462448120117f,
             13.136537551879883f,   13.534616470336914f,   13.932692527770996f,   14.330768585205078f,   14.728846549987793f,
             15.126925468444824f,   15.524999618530273f,   15.923077583312988f,   16.321155548095703f,   16.719230651855469f,
             17.117309570312500f,   17.515386581420898f,   17.913461685180664f,   18.311538696289062f,   18.709617614746094f,
             19.107692718505859f,   19.505769729614258f,   19.903848648071289f,   20.301923751831055f,   20.700000762939453f,
             21.486076354980469f,   22.334213256835938f,   23.252056121826172f,   24.248571395874023f,   25.334329605102539f,
             26.521877288818359f,   27.826231002807617f,   29.265518188476562f,   30.861820220947266f,   32.642307281494141f,
             35.121570587158203f,   37.789138793945312f,   40.659320831298828f,   43.747493743896484f,   47.070220947265625f,
             50.645320892333984f,   54.491958618164062f,   58.630756378173828f,   63.083904266357422f,   67.875282287597656f,
             89.125953674316406f,  117.037277221679688f,  153.750198364257812f,  201.881378173828125f,  265.078338623046875f,
            335.000000000000000f,  430.000000000000000f,  545.000000000000000f,  700.000000000000000f,  885.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required dodge rating for 1% dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DodgeRatingMultiplier(int Level)
        {
            return _dodgeRatingMultiplier[Level - 1];
        }
        #endregion

        #region Parry Rating Multiplier
        private static readonly float[] _parryRatingMultiplier = new float[]
        {
              0.796153187751770f,    0.796153068542480f,    0.796153068542480f,    0.796153068542480f,    0.796152949333191f,
              0.796153128147125f,    0.796153068542480f,    0.796153008937836f,    0.796153008937836f,    0.796153128147125f,
              1.194230556488037f,    1.592308163642883f,    1.990383744239807f,    2.388461112976074f,    2.786539077758789f,
              3.184616804122925f,    3.582691907882690f,    3.980769872665405f,    4.378847599029541f,    4.776922702789307f,
              5.175000190734863f,    5.573077678680420f,    5.971153259277344f,    6.369230747222900f,    6.767308712005615f,
              7.165383338928223f,    7.563461780548096f,    7.961538791656494f,    8.359617233276367f,    8.757692337036133f,
              9.155768394470215f,    9.553846359252930f,    9.951925277709961f,   10.350001335144043f,   10.748077392578125f,
             11.146153450012207f,   11.544231414794922f,   11.942307472229004f,   12.340383529663086f,   12.738462448120117f,
             13.136537551879883f,   13.534616470336914f,   13.932692527770996f,   14.330768585205078f,   14.728846549987793f,
             15.126925468444824f,   15.524999618530273f,   15.923077583312988f,   16.321155548095703f,   16.719230651855469f,
             17.117309570312500f,   17.515386581420898f,   17.913461685180664f,   18.311538696289062f,   18.709617614746094f,
             19.107692718505859f,   19.505769729614258f,   19.903848648071289f,   20.301923751831055f,   20.700000762939453f,
             21.486076354980469f,   22.334213256835938f,   23.252056121826172f,   24.248571395874023f,   25.334329605102539f,
             26.521877288818359f,   27.826231002807617f,   29.265518188476562f,   30.861820220947266f,   32.642307281494141f,
             35.121570587158203f,   37.789138793945312f,   40.659320831298828f,   43.747493743896484f,   47.070220947265625f,
             50.645320892333984f,   54.491958618164062f,   58.630756378173828f,   63.083904266357422f,   67.875282287597656f,
             89.125953674316406f,  117.037277221679688f,  153.750198364257812f,  201.881378173828125f,  265.078338623046875f,
            335.000000000000000f,  430.000000000000000f,  545.000000000000000f,  700.000000000000000f,  885.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required parry rating for 1% parry
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ParryRatingMultiplier(int Level)
        {
            return _parryRatingMultiplier[Level - 1];
        }
        #endregion

        #region Block Rating Multiplier
        private static readonly float[] _blockRatingMultiplier = new float[]
        {
              0.265384346246719f,    0.265384316444397f,    0.265384316444397f,    0.265384346246719f,    0.265384316444397f,
              0.265384346246719f,    0.265384376049042f,    0.265384346246719f,    0.265384376049042f,    0.265384376049042f,
              0.398076862096786f,    0.530769407749176f,    0.663461208343506f,    0.796153724193573f,    0.928846478462219f,
              1.061538696289062f,    1.194230675697327f,    1.326923012733459f,    1.459615826606750f,    1.592307567596436f,
              1.724999904632568f,    1.857692241668701f,    1.990384459495544f,    2.123076915740967f,    2.255769252777100f,
              2.388461112976074f,    2.521154165267944f,    2.653846025466919f,    2.786538839340210f,    2.919230461120605f,
              3.051922798156738f,    3.184615373611450f,    3.317308425903320f,    3.450000047683716f,    3.582691907882690f,
              3.715384006500244f,    3.848077058792114f,    3.980768918991089f,    4.113461017608643f,    4.246153831481934f,
              4.378846168518066f,    4.511538982391357f,    4.644230842590332f,    4.776923179626465f,    4.909615993499756f,
              5.042307853698730f,    5.175000190734863f,    5.307693004608154f,    5.440383911132812f,    5.573077201843262f,
              5.705769062042236f,    5.838461875915527f,    5.971154212951660f,    6.103846073150635f,    6.236537933349609f,
              6.369231224060059f,    6.501923084259033f,    6.634614944458008f,    6.767308235168457f,    6.900001049041748f,
              7.162024974822998f,    7.444736957550049f,    7.750685214996338f,    8.082857131958008f,    8.444775581359863f,
              8.840625762939453f,    9.275409698486328f,    9.755171775817871f,    10.287273406982422f,  10.880769729614258f,
             11.707191467285156f,   12.596380233764648f,   13.553107261657715f,   14.582497596740723f,   15.690073966979980f,
             16.881772994995117f,   18.163986206054688f,   19.543584823608398f,   21.027967453002930f,   22.625093460083008f,
             29.708650588989258f,   39.012428283691406f,   51.250064849853516f,   67.293792724609375f,   88.359443664550781f,
            112.000000000000000f,  143.000000000000000f,  182.000000000000000f,  233.000000000000000f,  295.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required block rating for 1% block
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float BlockRatingMultiplier(int Level)
        {
            return _blockRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Hit Rating Multiplier
        private static readonly float[] _meleeHitRatingMultiplier = new float[]
        {
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
              1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
              2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
              2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
              3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
              4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
              5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
              5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
              6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
              7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
              8.303797721862793f,    8.631579399108887f,    8.986301422119141f,    9.371427536010742f,    9.791045188903809f,
             10.250000000000000f,   10.754098892211914f,   11.310345649719238f,   11.927273750305176f,   12.615385055541992f,
             13.573554992675781f,   14.604499816894531f,   15.713747978210449f,   16.907243728637695f,   18.191390991210938f,
             19.573070526123047f,   21.059694290161133f,   22.659227371215820f,   24.380252838134766f,   26.231992721557617f,
             34.444812774658203f,   45.231800079345703f,   59.420368194580078f,   78.021789550781250f,  102.445739746093750f,
            130.000000000000000f,  166.000000000000000f,  211.000000000000000f,  269.000000000000000f,  340.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required melee hit rating for 1% Melee Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeHitRatingMultiplier(int Level)
        {
            return _meleeHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged Hit Rating Multipliers
        private static readonly float[] _rangedHitRatingMultiplier = new float[]
        {
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
              1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
              2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
              2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
              3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
              4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
              5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
              5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
              6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
              7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
              8.303797721862793f,    8.631579399108887f,    8.986301422119141f,    9.371427536010742f,    9.791045188903809f,
             10.250000000000000f,   10.754098892211914f,   11.310345649719238f,   11.927273750305176f,   12.615385055541992f,
             13.573554992675781f,   14.604499816894531f,   15.713747978210449f,   16.907243728637695f,   18.191390991210938f,
             19.573070526123047f,   21.059694290161133f,   22.659227371215820f,   24.380252838134766f,   26.231992721557617f,
             34.444812774658203f,   45.231800079345703f,   59.420368194580078f,   78.021789550781250f,  102.445739746093750f,
            130.000000000000000f,  166.000000000000000f,  211.000000000000000f,  269.000000000000000f,  340.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required range hit rating for 1% Range Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangedHitRatingMultiplier(int Level)
        {
            return _rangedHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Hit Rating Multiplier
        private static readonly float[] _spellHitRatingMultiplier = new float[]
        {
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
              1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
              2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
              2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
              3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
              4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
              5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
              5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
              6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
              7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
              8.303797721862793f,    8.631579399108887f,    8.986301422119141f,    9.371427536010742f,    9.791045188903809f,
             10.250000000000000f,   10.754098892211914f,   11.310345649719238f,   11.927273750305176f,   12.615385055541992f,
             13.573554992675781f,   14.604499816894531f,   15.713747978210449f,   16.907243728637695f,   18.191390991210938f,
             19.573070526123047f,   21.059694290161133f,   22.659227371215820f,   24.380252838134766f,   26.231992721557617f,
             34.444812774658203f,   45.231800079345703f,   59.420368194580078f,   78.021789550781250f,  102.445739746093750f,
            130.000000000000000f,  166.000000000000000f,  211.000000000000000f,  269.000000000000000f,  340.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Spell Hit rating for 1% Spell Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellHitRatingMultiplier(int Level)
        {
            return _spellHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Crit Rating Multiplier
        private static readonly float[] _meleeCritRatingMultiplier = new float[]
        {
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
              2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
              3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
              4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
              6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
              7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
              8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
             10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
             11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
             12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
             14.531646728515625f,   15.105264663696289f,   15.726029396057129f,   16.399999618530273f,   17.134328842163086f,
             17.937500000000000f,   18.819673538208008f,   19.793104171752930f,   20.872728347778320f,   22.076923370361328f,
             23.753721237182617f,   25.557874679565430f,   27.499055862426758f,   29.587677001953125f,   31.834934234619141f,
             34.252872467041016f,   36.854465484619141f,   39.653648376464844f,   42.665439605712891f,   45.905986785888672f,
             60.278423309326172f,   79.155647277832031f,  103.985641479492188f,  136.538131713867188f,  179.280044555664062f,
            228.000000000000000f,  290.000000000000000f,  370.000000000000000f,  470.000000000000000f,  600.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Melee Crit rating for 1% Melee Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeCritRatingMultiplier(int Level)
        {
            return _meleeCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged crit rating multipliers
        private static readonly float[] _rangeCritRatingMultiplier = new float[]
        {
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
              2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
              3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
              4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
              6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
              7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
              8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
             10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
             11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
             12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
             14.531646728515625f,   15.105264663696289f,   15.726029396057129f,   16.399999618530273f,   17.134328842163086f,
             17.937500000000000f,   18.819673538208008f,   19.793104171752930f,   20.872728347778320f,   22.076923370361328f,
             23.753721237182617f,   25.557874679565430f,   27.499055862426758f,   29.587677001953125f,   31.834934234619141f,
             34.252872467041016f,   36.854465484619141f,   39.653648376464844f,   42.665439605712891f,   45.905986785888672f,
             60.278423309326172f,   79.155647277832031f,  103.985641479492188f,  136.538131713867188f,  179.280044555664062f,
            228.000000000000000f,  290.000000000000000f,  370.000000000000000f,  470.000000000000000f,  600.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Range Crit rating for 1% Range Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangeCritRatingMultiplier(int Level)
        {
            return _rangeCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Crit Rating Multiplier
        private static readonly float[] _spellCritRatingMultiplier = new float[]
        {
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
              2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
              3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
              4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
              6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
              7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
              8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
             10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
             11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
             12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
             14.531646728515625f,   15.105264663696289f,   15.726029396057129f,   16.399999618530273f,   17.134328842163086f,
             17.937500000000000f,   18.819673538208008f,   19.793104171752930f,   20.872728347778320f,   22.076923370361328f,
             23.753721237182617f,   25.557874679565430f,   27.499055862426758f,   29.587677001953125f,   31.834934234619141f,
             34.252872467041016f,   36.854465484619141f,   39.653648376464844f,   42.665439605712891f,   45.905986785888672f,
             60.278423309326172f,   79.155647277832031f,  103.985641479492188f,  136.538131713867188f,  179.280044555664062f,
            228.000000000000000f,  290.000000000000000f,  370.000000000000000f,  470.000000000000000f,  600.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Spell Crit rating for 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellCritRatingMultiplier(int Level)
        {
            return _spellCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Haste Rating Multiplier
        private static readonly float[] _meleeHasteRatingMultiplier = new float[]
        {
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.576923012733459f,    0.769231021404266f,    0.961538016796112f,    1.153846025466919f,    1.346153974533081f,
              1.538462042808533f,    1.730769038200378f,    1.923076987266541f,    2.115385055541992f,    2.307692050933838f,
              2.500000000000000f,    2.692307949066162f,    2.884614944458008f,    3.076922893524170f,    3.269231081008911f,
              3.461538076400757f,    3.653846025466919f,    3.846153974533081f,    4.038462162017822f,    4.230769157409668f,
              4.423077106475830f,    4.615385055541992f,    4.807693004608154f,    5.000000000000000f,    5.192307949066162f,
              5.384614944458008f,    5.576922893524170f,    5.769230842590332f,    5.961537837982178f,    6.153845787048340f,
              6.346154212951660f,    6.538462162017822f,    6.730769157409668f,    6.923077106475830f,    7.115385055541992f,
              7.307693004608154f,    7.500000000000000f,    7.692306995391846f,    7.884614944458008f,    8.076923370361328f,
              8.269230842590332f,    8.461538314819336f,    8.653845787048340f,    8.846154212951660f,    9.038461685180664f,
              9.230769157409668f,    9.423076629638672f,    9.615385055541992f,    9.807692527770996f,   10.000000000000000f,
             10.379747390747070f,   10.789473533630371f,   11.232876777648926f,   11.714286804199219f,   12.238806724548340f,
             12.812500000000000f,   13.442624092102051f,   14.137930870056152f,   14.909090995788574f,   15.769232749938965f,
             16.966941833496094f,   18.255624771118164f,   19.642183303833008f,   21.134054183959961f,   22.739236831665039f,
             24.466339111328125f,   26.324617385864258f,   28.324035644531250f,   30.475315093994141f,   32.789989471435547f,
             43.056015014648438f,   56.539749145507812f,   74.275451660156250f,   97.527236938476562f,  128.057159423828125f,
            162.000000000000000f,  208.000000000000000f,  264.000000000000000f,  336.000000000000000f,  425.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Melee Haste rating for 1% Melee Haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeHasteRatingMultiplier(int Level)
        {
            return _meleeHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged Haste Rating Multiplier
        private static readonly float[] _rangedHasteRatingMultiplier = new float[]
        {
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.576923012733459f,    0.769231021404266f,    0.961538016796112f,    1.153846025466919f,    1.346153974533081f,
              1.538462042808533f,    1.730769038200378f,    1.923076987266541f,    2.115385055541992f,    2.307692050933838f,
              2.500000000000000f,    2.692307949066162f,    2.884614944458008f,    3.076922893524170f,    3.269231081008911f,
              3.461538076400757f,    3.653846025466919f,    3.846153974533081f,    4.038462162017822f,    4.230769157409668f,
              4.423077106475830f,    4.615385055541992f,    4.807693004608154f,    5.000000000000000f,    5.192307949066162f,
              5.384614944458008f,    5.576922893524170f,    5.769230842590332f,    5.961537837982178f,    6.153845787048340f,
              6.346154212951660f,    6.538462162017822f,    6.730769157409668f,    6.923077106475830f,    7.115385055541992f,
              7.307693004608154f,    7.500000000000000f,    7.692306995391846f,    7.884614944458008f,    8.076923370361328f,
              8.269230842590332f,    8.461538314819336f,    8.653845787048340f,    8.846154212951660f,    9.038461685180664f,
              9.230769157409668f,    9.423076629638672f,    9.615385055541992f,    9.807692527770996f,   10.000000000000000f,
             10.379747390747070f,   10.789473533630371f,   11.232876777648926f,   11.714286804199219f,   12.238806724548340f,
             12.812500000000000f,   13.442624092102051f,   14.137930870056152f,   14.909090995788574f,   15.769232749938965f,
             16.966941833496094f,   18.255624771118164f,   19.642183303833008f,   21.134054183959961f,   22.739236831665039f,
             24.466339111328125f,   26.324617385864258f,   28.324035644531250f,   30.475315093994141f,   32.789989471435547f,
             43.056015014648438f,   56.539749145507812f,   74.275451660156250f,   97.527236938476562f,  128.057159423828125f,
            162.000000000000000f,  208.000000000000000f,  264.000000000000000f,  336.000000000000000f,  425.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Range Haste rating for 1% Range haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangedHasteRatingMultiplier(int Level)
        {
            return _rangedHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Haste Rating Multiplier
        private static readonly float[] _spellHasteRatingMultiplier = new float[]
        {
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,    0.384615004062653f,
              0.576923012733459f,    0.769231021404266f,    0.961538016796112f,    1.153846025466919f,    1.346153974533081f,
              1.538462042808533f,    1.730769038200378f,    1.923076987266541f,    2.115385055541992f,    2.307692050933838f,
              2.500000000000000f,    2.692307949066162f,    2.884614944458008f,    3.076922893524170f,    3.269231081008911f,
              3.461538076400757f,    3.653846025466919f,    3.846153974533081f,    4.038462162017822f,    4.230769157409668f,
              4.423077106475830f,    4.615385055541992f,    4.807693004608154f,    5.000000000000000f,    5.192307949066162f,
              5.384614944458008f,    5.576922893524170f,    5.769230842590332f,    5.961537837982178f,    6.153845787048340f,
              6.346154212951660f,    6.538462162017822f,    6.730769157409668f,    6.923077106475830f,    7.115385055541992f,
              7.307693004608154f,    7.500000000000000f,    7.692306995391846f,    7.884614944458008f,    8.076923370361328f,
              8.269230842590332f,    8.461538314819336f,    8.653845787048340f,    8.846154212951660f,    9.038461685180664f,
              9.230769157409668f,    9.423076629638672f,    9.615385055541992f,    9.807692527770996f,   10.000000000000000f,
             10.379747390747070f,   10.789473533630371f,   11.232876777648926f,   11.714286804199219f,   12.238806724548340f,
             12.812500000000000f,   13.442624092102051f,   14.137930870056152f,   14.909090995788574f,   15.769232749938965f,
             16.966941833496094f,   18.255624771118164f,   19.642183303833008f,   21.134054183959961f,   22.739236831665039f,
             24.466339111328125f,   26.324617385864258f,   28.324035644531250f,   30.475315093994141f,   32.789989471435547f,
             43.056015014648438f,   56.539749145507812f,   74.275451660156250f,   97.527236938476562f,  128.057159423828125f,
            162.000000000000000f,  208.000000000000000f,  264.000000000000000f,  336.000000000000000f,  425.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the Spell haste rating for 1% Spell Haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellHasteRatingMultiplier(int Level)
        {
            return _spellHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Expertise Rating Multiplier
        private static readonly float[] _expertiseRatingMultiplier = new float[]
        {
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
              0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
              1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
              2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
              2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
              3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
              4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
              5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
              5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
              6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
              7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
              8.303797721862793f,    8.631579399108887f,    8.986301422119141f,    9.371427536010742f,    9.791045188903809f,
             10.250000000000000f,   10.754098892211914f,   11.310345649719238f,   11.927273750305176f,   12.615385055541992f,
             13.573554992675781f,   14.604499816894531f,   15.713747978210449f,   16.907243728637695f,   18.191390991210938f,
             19.573070526123047f,   21.059694290161133f,   22.659227371215820f,   24.380252838134766f,   26.231992721557617f,
             34.444812774658203f,   45.231800079345703f,   59.420368194580078f,   78.021789550781250f,  102.445739746093750f,
            130.000000000000000f,  166.000000000000000f,  211.000000000000000f,  269.000000000000000f,  340.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Exertise rating for 1% expertise
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ExpertiseRatingMultiplier(int Level)
        {
            return _expertiseRatingMultiplier[Level - 1];
        }
        #endregion

        #region Mastery Rating Multiplier
        private static readonly float[] _masteryRatingMultiplier = new float[]
        {
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
              0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
              2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
              3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
              4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
              6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
              7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
              8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
             10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
             11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
             12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
             14.531646728515625f,   15.105264663696289f,   15.726029396057129f,   16.399999618530273f,   17.134328842163086f,
             17.937500000000000f,   18.819673538208008f,   19.793104171752930f,   20.872728347778320f,   22.076923370361328f,
             23.753721237182617f,   25.557874679565430f,   27.499055862426758f,   29.587677001953125f,   31.834934234619141f,
             34.252872467041016f,   36.854465484619141f,   39.653648376464844f,   42.665439605712891f,   45.905986785888672f,
             60.278423309326172f,   79.155647277832031f,  103.985641479492188f,  136.538131713867188f,  179.280044555664062f,
            228.000000000000000f,  290.000000000000000f,  370.000000000000000f,  470.000000000000000f,  600.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required mastery rating for 1 mastery
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MasteryRatingMultiplier(int Level)
        {
            return _masteryRatingMultiplier[Level - 1];
        }
        #endregion

        #region PvP Resilience
        private static readonly float[] _pvpResilienceRatingMultiplier = new float[]
        {
              0.357366561889648f,    0.357366532087326f,    0.357366621494293f,    0.357366591691971f,    0.357366561889648f,
              0.357366621494293f,    0.357366591691971f,    0.357366561889648f,    0.357366532087326f,    0.357366591691971f,
              0.536050319671631f,    0.714734077453613f,    0.893416821956635f,    1.072100758552551f,    1.250784635543823f,
              1.429468393325806f,    1.608151316642761f,    1.786834836006165f,    1.965518832206726f,    2.144201278686523f,
              2.322885274887085f,    2.501568794250488f,    2.680251836776733f,    2.858935356140137f,    3.037619352340698f,
              3.216301679611206f,    3.394985675811768f,    3.573669672012329f,    3.752353429794312f,    3.931035995483398f,
              4.109719753265381f,    4.288403511047363f,    4.467087745666504f,    4.645770072937012f,    4.824453353881836f,
              5.003137111663818f,    5.181820392608643f,    5.360503673553467f,    5.539187908172607f,    5.717871189117432f,
              5.896554470062256f,    6.075237274169922f,    6.253921508789062f,    6.432604789733887f,    6.611288547515869f,
              6.789971828460693f,    6.968655586242676f,    7.147338867187500f,    7.326023101806641f,    7.504706859588623f,
              7.683389663696289f,    7.862073421478271f,    8.040756225585938f,    8.219439506530762f,    8.398122787475586f,
              8.576807022094727f,    8.755489349365234f,    8.934174537658691f,    9.112856864929199f,    9.291540145874023f,
              9.644384384155273f,   10.025083541870117f,   10.437072753906250f,   10.884376525878906f,   11.371736526489258f,
             11.904787063598633f,   12.490267753601074f,   13.136316299438477f,   13.852843284606934f,   14.652046203613281f,
             15.764904022216797f,   16.962285995483398f,   18.250612258911133f,   19.636793136596680f,   21.128253936767578f,
             22.732995986938477f,   24.459623336791992f,   26.317390441894531f,   28.316261291503906f,   30.466951370239258f,
             38.029308319091797f,   47.468757629394531f,   59.251216888427734f,   73.958267211914062f,   92.315818786621094f,
            115.000000000000000f,  150.000000000000000f,  190.000000000000000f,  245.000000000000000f,  310.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required PvP Resilience rating for 1% PvP Resilience
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PvPResilienceRatingRatingMultiplier(int Level)
        {
            return _pvpResilienceRatingMultiplier[Level - 1];
        }
        #endregion

        #region PvP Power
        private static readonly float[] _pvpPowerRatingMultiplier = new float[]
        {
              0.306314200162888f,    0.306314170360565f,    0.306314229965210f,    0.306314200162888f,    0.306314170360565f,
              0.306314259767532f,    0.306314229965210f,    0.306314200162888f,    0.306314170360565f,    0.306314229965210f,
              0.459471702575684f,    0.612629234790802f,    0.765785872936249f,    0.918943524360657f,    1.072101116180420f,
              1.225258588790894f,    1.378415346145630f,    1.531572699546814f,    1.684730410575867f,    1.837886929512024f,
              1.991044402122498f,    2.144201755523682f,    2.297358751296997f,    2.450515985488892f,    2.603673696517944f,
              2.756830215454102f,    2.909987688064575f,    3.063145399093628f,    3.216302871704102f,    3.369459390640259f,
              3.522616863250732f,    3.675774335861206f,    3.828932523727417f,    3.982088565826416f,    4.135245800018311f,
              4.288403511047363f,    4.441560268402100f,    4.594717502593994f,    4.747875213623047f,    4.901032447814941f,
              5.054189205169678f,    5.207346439361572f,    5.360504150390625f,    5.513661384582520f,    5.666818618774414f,
              5.819975852966309f,    5.973133563995361f,    6.126290798187256f,    6.279448032379150f,    6.432605743408203f,
              6.585762500762939f,    6.738920211791992f,    6.892076492309570f,    7.045234203338623f,    7.198391437530518f,
              7.351549148559570f,    7.504705429077148f,    7.657863616943359f,    7.811020374298096f,    7.964177131652832f,
              8.266614913940430f,    8.592928886413574f,    8.946062088012695f,    9.329465866088867f,    9.747202873229980f,
             10.204103469848633f,   10.705944061279297f,   11.259699821472168f,   11.873865127563477f,   12.558896064758301f,
             13.512775421142578f,   14.539102554321289f,   15.643383026123047f,   16.831537246704102f,   18.109931945800781f,
             19.485425949096680f,   20.965391159057617f,   22.557764053344727f,   24.271081924438477f,   26.114530563354492f,
             32.596549987792969f,   40.687507629394531f,   50.786758422851562f,   63.392799377441406f,   79.127845764160156f,
            100.000000000000000f,  128.000000000000000f,  163.000000000000000f,  208.000000000000000f,  265.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required PvP Power rating for 1% PvP Power
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PvPPowerRatingRatingMultiplier(int Level)
        {
            return _pvpPowerRatingMultiplier[Level - 1];
        }
        #endregion
        #endregion

        #region Agility to Dodge
        #region Warrior
        private static readonly float[] _warriorAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorAgilityToDodge(int Level)
        {
            return _warriorAgilityToDodge[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly float[] _paladinAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinAgilityToDodge(int Level)
        {
            return _paladinAgilityToDodge[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly float[] _hunterAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.042100f,
            0.037100f,    0.035500f,    0.033800f,    0.032500f,    0.031700f,
            0.030200f,    0.029500f,    0.028800f,    0.028000f,    0.027100f,
            0.025400f,    0.023500f,    0.022100f,    0.023400f,    0.022400f,
            0.023100f,    0.019400f,    0.019200f,    0.017500f,    0.0133266f,
            0.011115826f, 0.008905052f, 0.006694278f, 0.004483504f, 0.00227273f,
            0.002028454f, 0.001784178f, 0.001539902f, 0.001295626f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterAgilityToDodge(int Level)
        {
            return _hunterAgilityToDodge[Level - 1];
        }
        public static float HunterAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / HunterAgilityToDodge(Level);
        }
        #endregion

        #region Rogue
        private static readonly float[] _rogueAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.068900f,
            0.064200f,    0.061800f,    0.058400f,    0.056700f,    0.054700f,
            0.052900f,    0.051400f,    0.050100f,    0.049400f,    0.047500f,
            0.044500f,    0.041300f,    0.038500f,    0.035700f,    0.033600f,
            0.030900f,    0.029000f,    0.027100f,    0.025100f,    0.0240537f,
            0.020064260f, 0.016074820f, 0.012085380f, 0.008095940f, 0.004106500f,
            0.003495470f, 0.002884440f, 0.002273410f, 0.001662380f, 0.001051349f,     // ** Fix  
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueAgilityToDodge(int Level)
        {
            return _rogueAgilityToDodge[Level - 1];
        }
        public static float RogueAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / RogueAgilityToDodge(Level);
        }
        #endregion

        #region Priest
        private static readonly float[] _priestAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.049200f,
            0.045000f,    0.044400f,    0.044100f,    0.043300f,    0.042800f,
            0.041900f,    0.041400f,    0.041200f,    0.041000f,    0.040000f,
            0.037200f,    0.034600f,    0.032200f,    0.029800f,    0.027700f,
            0.025800f,    0.024000f,    0.022300f,    0.020700f,    0.0192366f,
            0.013500f,    0.009590f,    0.007489833f, 0.005389667f, 0.0032895f,
            0.00284187f,  0.00239424f,  0.001946610f, 0.001498980f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestAgilityToDodge(int Level)
        {
            return _priestAgilityToDodge[Level - 1];
        }
        public static float PriestAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / PriestAgilityToDodge(Level);
        }
        #endregion

        #region Death Knight
        private static readonly float[] _deathknightAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightAgilityToDodge(int Level)
        {
            return _deathknightAgilityToDodge[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly float[] _shamanAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.053600f,
            0.049400f,    0.048200f,    0.047200f,    0.044900f,    0.044200f,
            0.043000f,    0.042100f,    0.040900f,    0.040300f,    0.039600f,
            0.036800f,    0.034200f,    0.031700f,    0.029500f,    0.027500f,
            0.025500f,    0.023800f,    0.022100f,    0.020600f,    0.0192366f,
            0.016047174f, 0.012857748f, 0.009668322f, 0.006478896f, 0.003289470f,
            0.002841846f, 0.002394222f, 0.001946598f, 0.001498974f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanAgilityToDodge(int Level)
        {
            return _shamanAgilityToDodge[Level - 1];
        }
        public static float ShamanAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / ShamanAgilityToDodge(Level);
        }
        #endregion

        #region Mage
        private static readonly float[] _mageAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.0521f,
            0.045400f,    0.044200f,    0.042800f,    0.042900f,    0.0428f,
            0.041700f,    0.041700f,    0.041800f,    0.040600f,    0.0406f,
            0.037600f,    0.035200f,    0.032900f,    0.030300f,    0.0280f,
            0.026200f,    0.024100f,    0.022700f,    0.020800f,    0.0195253f,
            0.01628654f,  0.01304778f,  0.00980902f,  0.00657026f,  0.0033315f, // ** Fix
            0.00287547f,  0.00241944f,  0.00196341f,  0.00150738f,  0.001051349f,       
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageAgilityToDodge(int Level)
        {
            return _mageAgilityToDodge[Level - 1];
        }
        public static float MageAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / MageAgilityToDodge(Level);
        }
        #endregion

        #region Warlock
        private static readonly float[] _warlockAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.057000f,
            0.048800f,    0.047700f,    0.046500f,    0.045000f,    0.044200f,
            0.043100f,    0.043000f,    0.042000f,    0.040900f,    0.040100f,
            0.037200f,    0.034700f,    0.032200f,    0.029800f,    0.027700f,
            0.025800f,    0.024000f,    0.022400f,    0.020700f,    0.0192366f,
            0.016046408f, 0.012856216f, 0.009666024f, 0.006475832f, 0.003285640f,
            0.002838782f, 0.002391924f, 0.001945066f, 0.001498208f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockAgilityToDodge(int Level)
        {
            return _warlockAgilityToDodge[Level - 1];
        }
        public static float WarlockAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / WarlockAgilityToDodge(Level);
        }
        #endregion

        #region Monk
        private static readonly float[] _monkAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.061500f,
            0.058500f,    0.057400f,    0.055100f,    0.054100f,    0.053100f,
            0.052000f,    0.051000f,    0.049600f,    0.048900f,    0.047700f,
            0.045300f,    0.045900f,    0.039200f,    0.037000f,    0.033400f,
            0.032000f,    0.029500f,    0.027300f,    0.025400f,    0.0240458f,
            0.02005772f,  0.01606964f,  0.01208156f,  0.00809348f,  0.0041054f,
            0.00349459f,  0.00288378f,  0.00227297f,  0.00166216f,  0.001051349f,      // ** Fix 
       };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkAgilityToDodge(int Level)
        {
            return _monkAgilityToDodge[Level - 1];
        }
        public static float MonkAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / MonkAgilityToDodge(Level);
        }
        #endregion

        #region Druid
        private static readonly float[] _druidAgilityToDodge = new float[]
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.061500f,
            0.058500f,    0.057400f,    0.055100f,    0.054100f,    0.053100f,
            0.052000f,    0.051000f,    0.049600f,    0.048900f,    0.047700f,
            0.045300f,    0.045900f,    0.039200f,    0.037000f,    0.033400f,
            0.032000f,    0.029500f,    0.027300f,    0.025400f,    0.0240458f,
            0.02005772f,  0.01606964f,  0.01208156f,  0.00809348f,  0.0041054f,
            0.00349459f,  0.00288378f,  0.00227297f,  0.00166216f,  0.001051349f,      // ** Fix 
        };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidAgilityToDodge(int Level)
        {
            return _druidAgilityToDodge[Level - 1];
        }
        public static float DruidAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / DruidAgilityToDodge(Level);
        }
        #endregion
        #endregion

        #region Agility needed for 1% Physical Crit
        #region Warrior
        private static readonly float[] _warriorChanceToMeleeCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorChanceToMeleeCrit(int Level)
        {
            return _warriorChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly float[] _paladinChanceToMeleeCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinChanceToMeleeCrit(int Level)
        {
            return _paladinChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly float[] _hunterChanceToMeleeCrit = new float[]
        {
              3.521126747131348f,    3.528151988983154f,    3.689025402069092f,    3.952723741531372f,    4.115136623382568f,
              4.278332710266113f,    4.442324161529541f,    4.607120990753174f,    4.874793529510498f,    5.041232109069824f,
              5.412629127502441f,    5.988999366760254f,    6.464165687561035f,    6.940203189849854f,    7.519181251525879f,
              7.894927978515625f,    8.373645782470703f,    8.955333709716797f,    9.435894012451172f,   10.019457817077637f,
             10.399843215942383f,   10.985328674316406f,   11.469717979431152f,   12.057155609130859f,   12.543541908264160f,
             13.030945777893066f,   13.621436119079590f,   14.110919952392578f,   14.703503608703613f,   15.297163009643555f,
             15.687775611877441f,   16.283620834350586f,   16.880571365356445f,   17.376586914062500f,   17.975814819335938f,
             18.474145889282227f,   19.075670242309570f,   19.678415298461914f,   20.282329559326172f,   20.785440444946289f,
             21.289777755737305f,   21.897411346435547f,   22.506301879882812f,   23.116470336914062f,   23.727945327758789f,
             24.238662719726562f,   24.852809906005859f,   25.570346832275391f,   26.187196731567383f,   26.805412292480469f,
             27.323001861572266f,   27.944044113159180f,   28.566532135009766f,   29.292526245117188f,   29.917995452880859f,
             30.442882537841797f,   31.173332214355469f,   31.803277969360352f,   32.536937713623047f,   33.170024871826172f,
             33.702716827392578f,   34.441074371337891f,   35.181041717529297f,   35.820724487304688f,   36.564006805419922f,
             37.105064392089844f,   37.851833343505859f,   38.600349426269531f,   39.350559234619141f,   40.003040313720703f,
             43.041484832763672f,   46.310447692871094f,   49.827846527099609f,   53.612403869628906f,   57.684432983398438f,
             62.065925598144531f,   66.779747009277344f,   71.851982116699219f,   77.309028625488281f,   83.180831909179688f,
            108.695663452148438f,  142.857147216796875f,  188.679244995117188f,  250.000000000000000f,  322.580657958984375f,
            422.838226318359375f,  555.987243652343750f,  730.520507812500000f,  959.033020019531250f, 1259.518066406250000f,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Agility needed to generate 1% Physical/Range Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterChanceToMeleeCrit(int Level)
        {
            return _hunterChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly float[] _rogueChanceToMeleeCrit = new float[]
        {
              2.234094142913818f,    2.331228971481323f,    2.428363323211670f,    2.622632265090942f,    2.719766616821289f,
              2.816901445388794f,    3.011170148849487f,    3.108304500579834f,    3.205439567565918f,    3.399708032608032f,
              3.788246154785156f,    4.176784992218018f,    4.662456989288330f,    5.050994873046875f,    5.633802890777588f,
              6.022340297698975f,    6.410876750946045f,    6.896551609039307f,    7.382225990295410f,    7.867895126342773f,
              8.353569984436035f,    8.742107391357422f,    9.227782249450684f,    9.616318702697754f,   10.199128150939941f,
             10.684799194335938f,   11.073339462280273f,   11.559009552001953f,   12.044680595397949f,   12.627490043640137f,
             13.016019821166992f,   13.501690864562988f,   13.987363815307617f,   14.473036766052246f,   15.055842399597168f,
             15.541511535644531f,   15.930060386657715f,   16.415725708007812f,   16.901399612426758f,   17.484230041503906f,
             17.969871520996094f,   18.455564498901367f,   18.941223144531250f,   19.524042129516602f,   20.106847763061523f,
             20.592529296875000f,   21.078191757202148f,   21.563854217529297f,   22.049549102783203f,   22.729494094848633f,
             23.215160369873047f,   23.700838088989258f,   24.283632278442383f,   24.769273757934570f,   25.352140426635742f,
             25.934886932373047f,   26.420568466186523f,   27.003381729125977f,   27.489067077636719f,   28.169013977050781f,
             29.917457580566406f,   31.083024978637695f,   32.637184143066406f,   33.802856445312500f,   34.968460083007812f,
             36.134086608886719f,   37.299655914306641f,   38.173912048339844f,   39.048007965087891f,   40.019371032714844f,
             43.030555725097656f,   46.333190917968750f,   49.830078125000000f,   53.618152618408203f,   57.697746276855469f,
             62.069007873535156f,   66.828392028808594f,   71.879356384277344f,   77.319190979003906f,   83.146942138671875f,
            108.695663452148438f,  142.857147216796875f,  188.679244995117188f,  250.000000000000000f,  322.580657958984375f,
            422.838226318359375f,  555.987243652343750f,  730.520507812500000f,  959.033020019531250f, 1259.518066406250000f,
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueChanceToMeleeCrit(int Level)
        {
            return _rogueChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly float[] _priestChanceToMeleeCrit = new float[]
        {
             10.967918395996094f,   10.967918395996094f,   10.967918395996094f,   11.516319274902344f,   11.516319274902344f,
             11.516319274902344f,   11.516319274902344f,   12.064705848693848f,   12.064705848693848f,   12.064705848693848f,
             12.064705848693848f,   12.613107681274414f,   12.613107681274414f,   12.613107681274414f,   12.613107681274414f,
             13.161497116088867f,   13.161497116088867f,   13.161497116088867f,   13.709898948669434f,   13.709898948669434f,
             13.709898948669434f,   13.709898948669434f,   14.258297920227051f,   14.258297920227051f,   14.258297920227051f,
             14.806698799133301f,   14.806698799133301f,   14.806698799133301f,   15.355086326599121f,   15.355086326599121f,
             15.355086326599121f,   15.903485298156738f,   15.903485298156738f,   15.903485298156738f,   16.451887130737305f,
             16.451887130737305f,   16.451887130737305f,   17.000268936157227f,   17.000268936157227f,   17.000268936157227f,
             17.548662185668945f,   17.548662185668945f,   18.097057342529297f,   18.097057342529297f,   18.097057342529297f,
             18.645444869995117f,   18.645444869995117f,   19.193857192993164f,   19.193857192993164f,   19.193857192993164f,
             19.742244720458984f,   19.742244720458984f,   20.290643692016602f,   20.290643692016602f,   20.839063644409180f,
             20.839063644409180f,   21.387447357177734f,   21.387447357177734f,   21.935836791992188f,   21.935836791992188f,
             22.476354598999023f,   22.428815841674805f,   22.590803146362305f,   23.016708374023438f,   23.408786773681641f,
             23.765558242797852f,   24.085474014282227f,   24.192749023437500f,   24.284635543823242f,   24.909019470214844f,
             26.871391296386719f,   29.064950942993164f,   31.258596420288086f,   33.452201843261719f,   36.194114685058594f,
             38.936111450195312f,   41.678127288818359f,   44.968475341796875f,   48.258823394775391f,   52.097713470458984f,
             68.493148803710938f,   90.090087890625000f,  117.647056579589844f,  153.846160888671875f,  204.081634521484375f,
            267.509887695312500f,  351.747039794921875f,  462.166015625000000f,  606.735168457031250f,  796.837951660156250f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestChanceToMeleeCrit(int Level)
        {
            return _priestChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly float[] _deathKnightChanceToMeleeCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightChanceToMeleeCrit(int Level)
        {
            return _deathKnightChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly float[] _shamanChanceToMeleeCrit = new float[]
        {
              9.624639511108398f,    9.624639511108398f,   10.105869293212891f,   10.105869293212891f,   10.587097167968750f,
             10.587097167968750f,   10.587097167968750f,   11.068338394165039f,   11.068338394165039f,   11.549571037292480f,
             11.549571037292480f,   12.030798912048340f,   12.030798912048340f,   12.512026786804199f,   12.993256568908691f,
             13.474492073059082f,   13.474492073059082f,   13.955720901489258f,   13.955720901489258f,   14.918181419372559f,
             14.918181419372559f,   15.399422645568848f,   15.399422645568848f,   15.880653381347656f,   16.361871719360352f,
             16.843126296997070f,   16.843126296997070f,   17.324356079101562f,   17.324356079101562f,   18.286817550659180f,
             18.286817550659180f,   18.768028259277344f,   19.249279022216797f,   19.249279022216797f,   20.211738586425781f,
             20.692966461181641f,   20.692966461181641f,   21.174194335937500f,   21.174194335937500f,   22.136676788330078f,
             22.617883682250977f,   22.617883682250977f,   23.099115371704102f,   23.580345153808594f,   24.061597824096680f,
             24.542827606201172f,   25.024085998535156f,   25.505258560180664f,   25.505258560180664f,   26.467769622802734f,
             26.949020385742188f,   27.430252075195312f,   27.430252075195312f,   27.911441802978516f,   28.873945236206055f,
             29.355127334594727f,   29.836406707763672f,   29.836406707763672f,   30.317638397216797f,   31.280107498168945f,
             32.232173919677734f,   32.891490936279297f,   34.067138671875000f,   35.109031677246094f,   35.625095367431641f,
             36.575908660888672f,   37.478309631347656f,   38.341354370117188f,   39.184032440185547f,   40.005920410156250f,
             43.044631958007812f,   46.313877105712891f,   49.831569671630859f,   53.616428375244141f,   57.688758850097656f,
             62.070163726806641f,   66.784652709960938f,   71.857147216796875f,   77.315002441406250f,   83.187065124511719f,
            108.695663452148438f,  142.857147216796875f,  188.679244995117188f,  250.000000000000000f,  322.580657958984375f,
            422.838226318359375f,  555.987243652343750f,  730.520507812500000f,  959.033020019531250f, 1259.518066406250000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanChanceToMeleeCrit(int Level)
        {
            return _shamanChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly float[] _mageChanceToMeleeCrit = new float[]
        {
             12.936610221862793f,   12.936610221862793f,   12.936610221862793f,   13.583431243896484f,   13.583431243896484f,
             13.583431243896484f,   13.583431243896484f,   13.583431243896484f,   13.583431243896484f,   14.230277061462402f,
             14.230277061462402f,   14.230277061462402f,   14.230277061462402f,   14.230277061462402f,   14.877099990844727f,
             14.877099990844727f,   14.877099990844727f,   14.877099990844727f,   14.877099990844727f,   15.523924827575684f,
             15.523924827575684f,   15.523924827575684f,   15.523924827575684f,   16.170763015747070f,   16.170763015747070f,
             16.170763015747070f,   16.170763015747070f,   16.170763015747070f,   16.817604064941406f,   16.817604064941406f,
             16.817604064941406f,   16.817604064941406f,   17.464412689208984f,   17.464412689208984f,   17.464412689208984f,
             18.111249923706055f,   18.111249923706055f,   18.111249923706055f,   18.111249923706055f,   18.758100509643555f,
             18.758100509643555f,   18.758100509643555f,   18.758100509643555f,   19.404928207397461f,   19.404928207397461f,
             19.404928207397461f,   20.051733016967773f,   20.051733016967773f,   20.051733016967773f,   20.698577880859375f,
             20.698577880859375f,   20.698577880859375f,   21.345399856567383f,   21.345399856567383f,   21.345399856567383f,
             21.992233276367188f,   21.992233276367188f,   21.992233276367188f,   22.639083862304688f,   22.639083862304688f,
             22.639083862304688f,   22.639083862304688f,   23.285923004150391f,   23.285923004150391f,   23.285923004150391f,
             23.932720184326172f,   23.932720184326172f,   23.932720184326172f,   24.579566955566406f,   24.579566955566406f,
             26.520063400268555f,   28.460514068603516f,   30.401050567626953f,   32.988384246826172f,   35.575668334960938f,
             38.162986755371094f,   41.397068023681641f,   43.984466552734375f,   47.865440368652344f,   51.099666595458984f,
             67.114097595214844f,   87.719299316406250f,  116.279067993164062f,  151.515151977539062f,  200.000000000000000f,
            262.159698486328125f,  344.712097167968750f,  452.922698974609375f,  594.600463867187500f,  780.901184082031250f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageChanceToMeleeCrit(int Level)
        {
            return _mageChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly float[] _warlockChanceToMeleeCrit = new float[]
        {
              8.410429000854492f,    8.410429000854492f,    8.830949783325195f,    8.830949783325195f,    8.830949783325195f,
              9.251472473144531f,    9.251472473144531f,    9.251472473144531f,    9.671993255615234f,    9.671993255615234f,
             10.092517852783203f,   10.092517852783203f,   10.092517852783203f,   10.428953170776367f,   10.598722457885742f,
             10.770697593688965f,   10.944906234741211f,   11.121379852294922f,   11.300149917602539f,   11.481241226196289f,
             11.664677619934082f,   11.850517272949219f,   12.038764953613281f,   12.229454040527344f,   12.422622680664062f,
             12.618312835693359f,   12.816535949707031f,   13.017341613769531f,   13.220763206481934f,   13.426819801330566f,
             13.635551452636719f,   13.847002029418945f,   14.061197280883789f,   14.278187751770020f,   14.498006820678711f,
             14.720667839050293f,   14.946208953857422f,   15.174714088439941f,   15.406160354614258f,   15.640640258789062f,
             15.878157615661621f,   16.118762969970703f,   16.362487792968750f,   16.609392166137695f,   16.859512329101562f,
             17.112884521484375f,   17.369524002075195f,   17.629533767700195f,   17.892896652221680f,   18.159696578979492f,
             18.429952621459961f,   18.703754425048828f,   18.981094360351562f,   19.262033462524414f,   19.546634674072266f,
             19.834894180297852f,   20.126960754394531f,   20.422792434692383f,   20.722467422485352f,   21.026071548461914f,
             21.333606719970703f,   21.645114898681641f,   21.960695266723633f,   22.280349731445312f,   22.604183197021484f,
             22.932256698608398f,   23.264577865600586f,   23.601215362548828f,   23.942174911499023f,   24.287643432617188f,
             26.072355270385742f,   28.174966812133789f,   30.277523040771484f,   32.380168914794922f,   34.903282165527344f,
             37.846961975097656f,   40.790519714355469f,   43.734199523925781f,   47.098495483398438f,   50.462490081787109f,
             66.225166320800781f,   86.956520080566406f,  114.942527770996094f,  149.253738403320312f,  196.078430175781250f,
            257.019317626953125f,  337.953033447265625f,  444.041870117187500f,  582.941650390625000f,  765.589416503906250f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockChanceToMeleeCrit(int Level)
        {
            return _warlockChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly float[] _monkChanceToMeleeCrit = new float[]
        {
              7.922360897064209f,    7.922360897064209f,    8.318477630615234f,    8.318477630615234f,    8.714596748352051f,
              8.714596748352051f,    9.110712051391602f,    9.110712051391602f,    9.506833076477051f,   10.299064636230469f,
             10.695187568664551f,   10.695187568664551f,   11.091306686401367f,   11.091306686401367f,   11.883541107177734f,
             11.883541107177734f,   12.279657363891602f,   12.675781250000000f,   12.675781250000000f,   14.260249137878418f,
             14.260249137878418f,   14.656373977661133f,   15.052488327026367f,   15.052488327026367f,   15.844721794128418f,
             15.844721794128418f,   16.240831375122070f,   16.636970520019531f,   16.636970520019531f,   18.221441268920898f,
             18.617536544799805f,   18.617536544799805f,   19.013647079467773f,   19.409788131713867f,   19.805902481079102f,
             20.202020645141602f,   20.598129272460938f,   20.598129272460938f,   20.994245529174805f,   22.578714370727539f,
             22.974826812744141f,   22.974826812744141f,   23.370983123779297f,   23.767082214355469f,   24.559343338012695f,
             24.955453872680664f,   24.955453872680664f,   25.351562500000000f,   25.747648239135742f,   27.332113265991211f,
             27.728252410888672f,   28.124410629272461f,   28.520498275756836f,   28.520498275756836f,   29.312704086303711f,
             29.708852767944336f,   30.104976654052734f,   30.501102447509766f,   30.897192001342773f,   32.481662750244141f,
             33.462051391601562f,   33.897041320800781f,   35.092151641845703f,   35.828552246093750f,   36.522209167480469f,
             37.171268463134766f,   37.773765563964844f,   38.800594329833984f,   39.411819458007812f,   40.003040313720703f,
             43.041484832763672f,   46.310447692871094f,   49.827846527099609f,   53.612403869628906f,   57.684432983398438f,
             62.065925598144531f,   66.779747009277344f,   71.851982116699219f,   77.309028625488281f,   83.180831909179688f,
            108.695663452148438f,  142.857147216796875f,  188.679244995117188f,  250.000000000000000f,  322.580657958984375f,
            422.838226318359375f,  555.987243652343750f,  730.520507812500000f,  959.033020019531250f, 1259.518066406250000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkChanceToMeleeCrit(int Level)
        {
            return _monkChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly float[] _druidChanceToMeleeCrit = new float[]
        {
              7.922360897064209f,    7.922360897064209f,    8.318477630615234f,    8.318477630615234f,    8.714596748352051f,
              8.714596748352051f,    9.110712051391602f,    9.110712051391602f,    9.506833076477051f,   10.299064636230469f,
             10.695187568664551f,   10.695187568664551f,   11.091306686401367f,   11.091306686401367f,   11.883541107177734f,
             11.883541107177734f,   12.279657363891602f,   12.675781250000000f,   12.675781250000000f,   14.260249137878418f,
             14.260249137878418f,   14.656373977661133f,   15.052488327026367f,   15.052488327026367f,   15.844721794128418f,
             15.844721794128418f,   16.240831375122070f,   16.636970520019531f,   16.636970520019531f,   18.221441268920898f,
             18.617536544799805f,   18.617536544799805f,   19.013647079467773f,   19.409788131713867f,   19.805902481079102f,
             20.202020645141602f,   20.598129272460938f,   20.598129272460938f,   20.994245529174805f,   22.578714370727539f,
             22.974826812744141f,   22.974826812744141f,   23.370983123779297f,   23.767082214355469f,   24.559343338012695f,
             24.955453872680664f,   24.955453872680664f,   25.351562500000000f,   25.747648239135742f,   27.332113265991211f,
             27.728252410888672f,   28.124410629272461f,   28.520498275756836f,   28.520498275756836f,   29.312704086303711f,
             29.708852767944336f,   30.104976654052734f,   30.501102447509766f,   30.897192001342773f,   32.481662750244141f,
             33.462051391601562f,   33.897041320800781f,   35.092151641845703f,   35.828552246093750f,   36.522209167480469f,
             37.171268463134766f,   37.773765563964844f,   38.800594329833984f,   39.411819458007812f,   40.003040313720703f,
             43.041484832763672f,   46.310447692871094f,   49.827846527099609f,   53.612403869628906f,   57.684432983398438f,
             62.065925598144531f,   66.779747009277344f,   71.851982116699219f,   77.309028625488281f,   83.180831909179688f,
            108.695663452148438f,  142.857147216796875f,  188.679244995117188f,  250.000000000000000f,  322.580657958984375f,
            422.838226318359375f,  555.987243652343750f,  730.520507812500000f,  959.033020019531250f, 1259.518066406250000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidChanceToMeleeCrit(int Level)
        {
            return _druidChanceToMeleeCrit[Level - 1];
        }
        #endregion
        #endregion

        #region Intellect needed for 1% Spell Crit
        #region Warrior
        private static readonly float[] _warriorChanceToSpellCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorChanceToSpellCrit(int Level)
        {
            return _warriorChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly float[] _paladinChanceToSpellCrit = new float[]
        {
             12.015620231628418f,   12.616401672363281f,   12.616401672363281f,   13.217182159423828f,   13.217182159423828f,
             13.817963600158691f,   14.418744087219238f,   14.418744087219238f,   15.019525527954102f,   15.019525527954102f,
             15.620306015014648f,   16.221086502075195f,   16.821868896484375f,   17.422649383544922f,   18.624212265014648f,
             18.624212265014648f,   19.224992752075195f,   20.426553726196289f,   20.426553726196289f,   21.628116607666016f,
             22.228897094726562f,   22.829679489135742f,   23.430459976196289f,   24.031240463256836f,   25.232803344726562f,
             25.833583831787109f,   25.833583831787109f,   27.035144805908203f,   27.635927200317383f,   28.837488174438477f,
             29.438270568847656f,   30.039051055908203f,   30.639831542968750f,   31.240612030029297f,   32.442173004150391f,
             33.042957305908203f,   33.643737792968750f,   34.845298767089844f,   35.446079254150391f,   36.647640228271484f,
             37.248424530029297f,   37.849205017089844f,   39.050765991210938f,   39.050765991210938f,   40.252326965332031f,
             40.853107452392578f,   42.054672241210938f,   43.256233215332031f,   43.857013702392578f,   45.058574676513672f,
             45.659358978271484f,   46.260139465332031f,   47.461700439453125f,   48.062480926513672f,   49.264041900634766f,
             49.864822387695312f,   50.465606689453125f,   52.267948150634766f,   52.868728637695312f,   54.070289611816406f,
             63.082008361816406f,   64.884346008300781f,   67.287475585937500f,   69.089813232421875f,   71.492942810058594f,
             73.295280456542969f,   74.496849060058594f,   76.299186706542969f,   78.101531982421875f,   79.903877258300781f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinChanceToSpellCrit(int Level)
        {
            return _paladinChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly float[] _hunterChanceToSpellCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterChanceToSpellCrit(int Level)
        {
            return _hunterChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly float[] _rogueChanceToSpellCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueChanceToSpellCrit(int Level)
        {
            return _rogueChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly float[] _priestChanceToSpellCrit = new float[]
        {
              5.847176074981689f,    6.112957000732422f,    6.378737449645996f,    6.644518375396729f,    7.176079750061035f,
              7.441860675811768f,    7.707641124725342f,    7.973422050476074f,    8.239202499389648f,    8.770764350891113f,
              9.568106651306152f,   10.631229400634766f,   11.428571701049805f,   12.757474899291992f,   13.820597648620605f,
             14.617939949035645f,   15.946844100952148f,   16.744186401367188f,   17.807308197021484f,   19.136213302612305f,
             19.933555603027344f,   21.262458801269531f,   22.059801101684570f,   23.388704299926758f,   24.451828002929688f,
             25.514949798583984f,   26.578073501586914f,   27.641195297241211f,   28.704319000244141f,   30.033222198486328f,
             31.096345901489258f,   32.159469604492188f,   33.222591400146484f,   34.551494598388672f,   35.614616394042969f,
             36.677742004394531f,   38.006645202636719f,   39.069766998291016f,   40.132888793945312f,   41.461795806884766f,
             42.524917602539062f,   43.853820800781250f,   44.916942596435547f,   46.245845794677734f,   47.574748992919922f,
             48.637874603271484f,   49.966777801513672f,   51.029899597167969f,   52.358802795410156f,   53.687705993652344f,
             54.750831604003906f,   56.079734802246094f,   57.142856597900391f,   58.471759796142578f,   60.066444396972656f,
             61.129570007324219f,   62.458473205566406f,   63.521595001220703f,   65.116279602050781f,   66.445182800292969f,
             67.508308410644531f,   69.102989196777344f,   70.166114807128906f,   71.760795593261719f,   73.089698791503906f,
             74.418601989746094f,   75.747505187988281f,   77.076408386230469f,   78.671096801757812f,   80.000000000000000f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestChanceToSpellCrit(int Level)
        {
            return _priestChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly float[] _deathKnightChanceToSpellCrit = new float[]
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightChanceToSpellCrit(int Level)
        {
            return _deathKnightChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly float[] _shamanChanceToSpellCrit = new float[]
        {
              7.502679347991943f,    7.859950065612793f,    8.217220306396484f,    8.217220306396484f,    8.574490547180176f,
              8.931761741638184f,    9.289031982421875f,    9.646302223205566f,   10.003572463989258f,   10.003572463989258f,
             10.718113899230957f,   11.432654380798340f,   12.504466056823730f,   13.219006538391113f,   14.290818214416504f,
             15.005358695983887f,   15.719900131225586f,   16.791711807250977f,   17.506252288818359f,   18.578063964843750f,
             19.292604446411133f,   20.007144927978516f,   21.078956604003906f,   21.793497085571289f,   22.865308761596680f,
             23.579849243164062f,   24.294391632080078f,   25.366201400756836f,   26.080743789672852f,   27.152553558349609f,
             28.224365234375000f,   28.938907623291016f,   30.010717391967773f,   30.725259780883789f,   31.797069549560547f,
             32.868881225585938f,   33.583423614501953f,   34.655235290527344f,   35.369773864746094f,   36.798854827880859f,
             37.513397216796875f,   38.227939605712891f,   39.299751281738281f,   40.371562957763672f,   41.443370819091797f,
             42.515182495117188f,   43.229724884033203f,   44.301536560058594f,   45.373348236083984f,   46.445159912109375f,
             47.516971588134766f,   48.231510162353516f,   49.660594940185547f,   50.375133514404297f,   51.804214477539062f,
             52.518756866455078f,   53.590568542480469f,   55.019649505615234f,   55.734191894531250f,   57.163272857666016f,
             61.013687133789062f,   63.081817626953125f,   65.794639587402344f,   68.148849487304688f,   70.301383972167969f,
             72.530677795410156f,   74.693489074707031f,   76.488655090332031f,   78.256568908691406f,   80.000000000000000f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanChanceToSpellCrit(int Level)
        {
            return _shamanChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly float[] _mageChanceToSpellCrit = new float[]
        {
              6.108735561370850f,    6.353085041046143f,    6.597434520721436f,    7.086133003234863f,    7.330482482910156f,
              7.574831962585449f,    7.819181442260742f,    8.063530921936035f,    8.552229881286621f,    8.796579360961914f,
              9.529627799987793f,   10.751374244689941f,   11.484422683715820f,   13.683567047119141f,   14.905314445495605f,
             15.638362884521484f,   16.615760803222656f,   17.593158721923828f,   18.570556640625000f,   19.792303085327148f,
             20.525350570678711f,   21.747098922729492f,   22.480146408081055f,   23.701892852783203f,   24.679290771484375f,
             25.656688690185547f,   26.878437042236328f,   29.566280364990234f,   30.788026809692383f,   32.009773254394531f,
             32.742820739746094f,   33.964569091796875f,   34.941967010498047f,   35.919364929199219f,   37.141113281250000f,
             38.118511199951172f,   39.340255737304688f,   40.317653656005859f,   41.539402008056641f,   42.516799926757812f,
             43.494197845458984f,   46.426391601562500f,   47.403785705566406f,   48.625534057617188f,   49.847282409667969f,
             50.824680328369141f,   52.046424865722656f,   53.268173217773438f,   54.489921569824219f,   55.711666107177734f,
             56.689064025878906f,   57.910812377929688f,   58.888210296630859f,   60.354305267333984f,   61.576053619384766f,
             64.752593994140625f,   66.218688964843750f,   67.196090698242188f,   68.662185668945312f,   69.883934020996094f,
             69.883934020996094f,   69.883934020996094f,   69.883934020996094f,   70.128280639648438f,   70.372634887695312f,
             72.571777343750000f,   74.770919799804688f,   76.237022399902344f,   77.947463989257812f,   79.902259826660156f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageChanceToSpellCrit(int Level)
        {
            return _mageChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly float[] _warlockChanceToSpellCrit = new float[]
        {
              6.666666507720947f,    6.969696998596191f,    7.272727489471436f,    7.575757503509521f,    7.878787994384766f,
              8.181818008422852f,    8.484848022460938f,    8.787878990173340f,    9.090909004211426f,    9.393939018249512f,
             10.303030014038086f,   11.212121009826660f,   12.121212005615234f,   13.030303001403809f,   13.939393997192383f,
             14.545454978942871f,   15.757575988769531f,   16.666666030883789f,   17.575757980346680f,   18.484848022460938f,
             19.393939971923828f,   20.303030014038086f,   21.212121963500977f,   22.424242019653320f,   23.333333969116211f,
             23.939393997192383f,   25.151515960693359f,   26.060606002807617f,   27.272727966308594f,   28.181818008422852f,
             28.787878036499023f,   30.000000000000000f,   30.909090042114258f,   32.121212005615234f,   33.030303955078125f,
             33.939392089843750f,   35.151515960693359f,   36.060607910156250f,   37.272727966308594f,   38.181819915771484f,
             39.090908050537109f,   40.303031921386719f,   41.212120056152344f,   42.424243927001953f,   43.636363983154297f,
             44.545455932617188f,   45.454544067382812f,   46.666667938232422f,   47.878787994384766f,   49.090908050537109f,
             50.000000000000000f,   51.212120056152344f,   52.424243927001953f,   53.636363983154297f,   54.848484039306641f,
             55.757575988769531f,   56.969696044921875f,   58.181819915771484f,   59.393939971923828f,   60.606060028076172f,
             62.870487213134766f,   64.923057556152344f,   67.740943908691406f,   70.006988525390625f,   72.208091735839844f,
             74.341438293457031f,   76.761703491210938f,   78.532943725585938f,   79.263076782226562f,   80.000000000000000f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockChanceToSpellCrit(int Level)
        {
            return _warlockChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly float[] _monkChanceToSpellCrit = new float[]
        {
              6.987454414367676f,    7.305066108703613f,    7.622677326202393f,    7.940289020538330f,    8.257900238037109f,
              8.575511932373047f,    8.893123626708984f,    8.893123626708984f,    9.210735321044922f,   10.163570404052734f,
             10.798792839050293f,   11.751627922058105f,   12.386851310729980f,   13.339685440063477f,   14.610132217407227f,
             15.245354652404785f,   16.198188781738281f,   16.833412170410156f,   17.786247253417969f,   19.374305725097656f,
             20.009529113769531f,   20.962362289428711f,   21.597585678100586f,   22.868032455444336f,   23.820867538452148f,
             24.456090927124023f,   25.408924102783203f,   26.044147491455078f,   27.314594268798828f,   28.902652740478516f,
             29.537876129150391f,   30.808320999145508f,   31.443544387817383f,   32.396377563476562f,   33.666824340820312f,
             34.302047729492188f,   35.254882812500000f,   36.207717895507812f,   37.160552978515625f,   39.066223144531250f,
             39.701446533203125f,   40.971889495849609f,   41.607112884521484f,   42.877559661865234f,   43.830394744873047f,
             44.783229827880859f,   45.736064910888672f,   46.688899993896484f,   47.959346771240234f,   49.547405242919922f,
             50.500236511230469f,   51.770683288574219f,   52.405906677246094f,   53.676353454589844f,   54.946800231933594f,
             55.899635314941406f,   56.852470397949219f,   57.805305480957031f,   59.075752258300781f,   60.981418609619141f,
             61.905555725097656f,   63.863040924072266f,   66.558822631835938f,   68.627410888671875f,   70.633392333984375f,
             72.823944091796875f,   74.946418762207031f,   76.576591491699219f,   78.303855895996094f,   80.000000000000000f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkChanceToSpellCrit(int Level)
        {
            return _monkChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly float[] _druidChanceToSpellCrit = new float[]
        {
              6.987454414367676f,    7.305066108703613f,    7.622677326202393f,    7.940289020538330f,    8.257900238037109f,
              8.575511932373047f,    8.893123626708984f,    8.893123626708984f,    9.210735321044922f,   10.163570404052734f,
             10.798792839050293f,   11.751627922058105f,   12.386851310729980f,   13.339685440063477f,   14.610132217407227f,
             15.245354652404785f,   16.198188781738281f,   16.833412170410156f,   17.786247253417969f,   19.374305725097656f,
             20.009529113769531f,   20.962362289428711f,   21.597585678100586f,   22.868032455444336f,   23.820867538452148f,
             24.456090927124023f,   25.408924102783203f,   26.044147491455078f,   27.314594268798828f,   28.902652740478516f,
             29.537876129150391f,   30.808320999145508f,   31.443544387817383f,   32.396377563476562f,   33.666824340820312f,
             34.302047729492188f,   35.254882812500000f,   36.207717895507812f,   37.160552978515625f,   39.066223144531250f,
             39.701446533203125f,   40.971889495849609f,   41.607112884521484f,   42.877559661865234f,   43.830394744873047f,
             44.783229827880859f,   45.736064910888672f,   46.688899993896484f,   47.959346771240234f,   49.547405242919922f,
             50.500236511230469f,   51.770683288574219f,   52.405906677246094f,   53.676353454589844f,   54.946800231933594f,
             55.899635314941406f,   56.852470397949219f,   57.805305480957031f,   59.075752258300781f,   60.981418609619141f,
             61.905555725097656f,   63.863040924072266f,   66.558822631835938f,   68.627410888671875f,   70.633392333984375f,
             72.823944091796875f,   74.946418762207031f,   76.576591491699219f,   78.303855895996094f,   80.000000000000000f,
             86.010993957519531f,   92.608428955078125f,   99.450210571289062f,  107.025047302246094f,  115.088577270507812f,
            123.885147094726562f,  133.414779663085938f,  143.433105468750000f,  154.428833007812500f,  166.157608032226562f,
            218.178909301757812f,  286.505401611328125f,  376.378021240234375f,  494.202423095703125f,  648.907592773437500f,
            850.587036132812500f, 1118.431518554687500f, 1469.524780273437500f, 1929.203735351562500f, 2533.663574218750000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidChanceToSpellCrit(int Level)
        {
            return _druidChanceToSpellCrit[Level - 1];
        }
        #endregion
        #endregion

        #region Spell Scaling Multiplier for Abilities
        #region Warrior
        private static readonly float[] _warriorSpellScaling = new float[]
        {
              23.310699462890625f,   24.165054321289062f,   24.734624862670898f,   25.114337921142578f,   25.367479324340820f,
              25.873764038085938f,   27.155298233032227f,   28.436830520629883f,   29.718362808227539f,   30.999897003173828f,
              32.281429290771484f,   33.562961578369141f,   34.844493865966797f,   37.191482543945312f,   39.665225982666016f,
              42.265724182128906f,   44.992973327636719f,   47.846981048583984f,   50.827743530273438f,   53.935260772705078f,
              58.884620666503906f,   64.162399291992188f,   69.779998779296875f,   75.748825073242188f,   82.080299377441406f,
              88.785820007324219f,   95.876800537109375f,  103.364639282226562f,  111.260757446289062f,  119.576553344726562f,
             128.323440551757812f,  137.512817382812500f,  147.156097412109375f,  157.264694213867188f,  167.850006103515625f,
             178.923446655273438f,  190.496429443359375f,  202.580352783203125f,  215.186630249023438f,  228.326660156250000f,
             237.557662963867188f,  246.991455078125000f,  256.628082275390625f,  266.467498779296875f,  276.509735107421875f,
             286.754760742187500f,  297.202606201171875f,  307.853240966796875f,  318.706726074218750f,  329.762969970703125f,
             341.022064208984375f,  352.483947753906250f,  364.148620605468750f,  376.016143798828125f,  388.086425781250000f,
             400.359558105468750f,  412.835479736328125f,  425.514221191406250f,  478.257232666015625f,  491.949981689453125f,
             512.168640136718750f,  532.942565917968750f,  554.279357910156250f,  576.186645507812500f,  598.671997070312500f,
             621.742980957031250f,  645.407348632812500f,  669.672607421875000f,  694.546325683593750f,  720.036193847656250f,
             746.149719238281250f,  772.894592285156250f,  800.278442382812500f,  828.308776855468750f,  856.993286132812500f,
             886.339477539062500f,  916.355041503906250f,  947.047546386718750f,  978.424621582031250f, 1010.493896484375000f,
            1032.933593750000000f, 1055.626708984375000f, 1078.573486328125000f, 1101.773681640625000f, 1125.227416992187500f,
            1148.934570312500000f, 1172.895385742187500f, 1197.109619140625000f, 1221.577270507812500f, 1246.298583984375000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorSpellScaling(int Level)
        {
            return _warriorSpellScaling[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly float[] _paladinSpellScaling = new float[]
        {
              34.621398925781250f,   35.435558319091797f,   35.598392486572266f,   35.858921051025391f,   36.038036346435547f,
              36.213897705078125f,   36.356212615966797f,   36.490188598632812f,   37.879398345947266f,   38.692199707031250f,
              39.412963867187500f,   40.041683197021484f,   40.578365325927734f,   42.380535125732422f,   44.184898376464844f,
              45.975898742675781f,   47.737979888916016f,   49.455604553222656f,   51.113227844238281f,   52.695327758789062f,
              54.484577178955078f,   56.232154846191406f,   57.929901123046875f,   59.570056915283203f,   61.145259857177734f,
              62.648544311523438f,   64.073341369628906f,   65.413490295410156f,   66.663208007812500f,   67.817123413085938f,
              70.275772094726562f,   72.727111816406250f,   75.166229248046875f,   77.588195800781250f,   79.988113403320312f,
              82.361061096191406f,   84.702133178710938f,   87.006431579589844f,   89.269050598144531f,   91.485092163085938f,
              94.516792297363281f,   97.564628601074219f,  100.626136779785156f,  103.698829650878906f,  106.780258178710938f,
             109.867942810058594f,  112.959411621093750f,  116.052207946777344f,  119.143882751464844f,  122.231933593750000f,
             125.313941955566406f,  128.387420654296875f,  131.449935913085938f,  134.499008178710938f,  137.532196044921875f,
             140.547058105468750f,  143.541122436523438f,  293.023895263671875f,  327.008331298828125f,  332.962493896484375f,
             354.074645996093750f,  375.984924316406250f,  398.707458496093750f,  422.256347656250000f,  446.645690917968750f,
             471.889556884765625f,  498.001983642578125f,  524.997009277343750f,  552.888610839843750f,  581.690795898437500f,
             611.417602539062500f,  642.082885742187500f,  673.700622558593750f,  706.284667968750000f,  739.848999023437500f,
             774.407348632812500f,  809.973693847656250f,  846.561767578125000f,  884.185363769531250f,  922.858276367187500f,
             943.719848632812500f,  964.814392089843750f,  986.141723632812500f, 1007.701477050781250f, 1029.493408203125000f,
            1051.517211914062500f, 1073.772705078125000f, 1096.259521484375000f, 1118.977416992187500f, 1141.926025390625000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinSpellScaling(int Level)
        {
            return _paladinSpellScaling[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly float[] _hunterSpellScaling = new float[]
        {
               5.221596717834473f,    5.772695064544678f,    6.276958942413330f,    6.747173309326172f,    7.192804336547852f,
               7.721517562866211f,    8.508201599121094f,    9.333040237426758f,   10.196031570434570f,   11.097178459167480f,
              12.036478042602539f,   13.013932228088379f,   14.029540061950684f,   15.528150558471680f,   17.151443481445312f,
              18.905082702636719f,   20.794727325439453f,   22.826038360595703f,   25.004676818847656f,   27.336301803588867f,
              29.755561828613281f,   32.326488494873047f,   35.053527832031250f,   37.941078186035156f,   40.993473052978516f,
              44.214996337890625f,   47.609882354736328f,   51.182312011718750f,   54.936397552490234f,   58.876216888427734f,
              63.005783081054688f,   67.329055786132812f,   71.849945068359375f,   76.572303771972656f,   81.499931335449219f,
              86.636573791503906f,   91.985923767089844f,   97.551612854003906f,  103.337226867675781f,  109.346313476562500f,
             116.451362609863281f,  123.888633728027344f,  131.667526245117188f,  139.797622680664062f,  148.288543701171875f,
             157.150070190429688f,  166.392074584960938f,  176.024520874023438f,  186.057479858398438f,  196.501174926757812f,
             207.365875244140625f,  218.662002563476562f,  230.400070190429688f,  242.590698242187500f,  255.244613647460938f,
             268.372680664062500f,  281.985778808593750f,  296.095062255859375f,  338.963287353515625f,  355.055053710937500f,
             376.741821289062500f,  399.409088134765625f,  423.086090087890625f,  447.802459716796875f,  473.588317871093750f,
             500.474151611328125f,  528.490905761718750f,  557.670043945312500f,  588.043273925781250f,  619.642944335937500f,
             652.501647949218750f,  686.652587890625000f,  722.129211425781250f,  758.965515136718750f,  797.195922851562500f,
             836.855285644531250f,  877.978881835937500f,  920.602355957031250f,  964.761840820312500f, 1010.493896484375000f,
            1032.933593750000000f, 1055.626708984375000f, 1078.573486328125000f, 1101.773681640625000f, 1125.227416992187500f,
            1148.934570312500000f, 1172.895385742187500f, 1197.109619140625000f, 1221.577270507812500f, 1246.298583984375000f,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterSpellScaling(int Level)
        {
            return _hunterSpellScaling[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly float[] _rogueSpellScaling = new float[]
        {
              37.297119140625000f,   38.664085388183594f,   39.575397491455078f,   40.182941436767578f,   40.587966918945312f,
              41.398025512695312f,   43.448474884033203f,   45.498928070068359f,   47.549381256103516f,   49.599834442138672f,
              51.650287628173828f,   53.700740814208984f,   55.751190185546875f,   59.506370544433594f,   63.464359283447266f,
              67.625152587890625f,   71.988761901855469f,   76.555175781250000f,   81.324394226074219f,   86.296417236328125f,
              90.327865600585938f,   94.427680969238281f,   98.588249206542969f,  102.801979064941406f,  107.061256408691406f,
             111.358489990234375f,  115.686058044433594f,  120.036361694335938f,  124.401786804199219f,  128.774749755859375f,
             133.147628784179688f,  137.512817382812500f,  141.862716674804688f,  146.189712524414062f,  150.486206054687500f,
             154.744598388671875f,  158.957290649414062f,  163.116653442382812f,  167.215087890625000f,  171.244995117187500f,
             182.127532958984375f,  193.476638793945312f,  205.302459716796875f,  217.615112304687500f,  230.424774169921875f,
             243.741546630859375f,  257.575592041015625f,  271.937042236328125f,  286.836029052734375f,  302.282745361328125f,
             318.287261962890625f,  334.859741210937500f,  352.010345458984375f,  369.749206542968750f,  388.086425781250000f,
             407.032226562500000f,  426.596649169921875f,  446.789916992187500f,  510.141021728515625f,  532.945800781250000f,
             552.214721679687500f,  571.938354492187500f,  592.121704101562500f,  612.769897460937500f,  633.887939453125000f,
             655.481018066406250f,  677.554077148437500f,  700.112243652343750f,  723.160583496093750f,  746.704162597656250f,
             770.748107910156250f,  795.297363281250000f,  820.357116699218750f,  845.932373046875000f,  872.028198242187500f,
             898.649719238281250f,  925.802001953125000f,  953.490051269531250f,  981.718994140625000f, 1010.493896484375000f,
            1032.933593750000000f, 1055.626708984375000f, 1078.573486328125000f, 1101.773681640625000f, 1125.227416992187500f,
            1148.934570312500000f, 1172.895385742187500f, 1197.109619140625000f, 1221.577270507812500f, 1246.298583984375000f,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueSpellScaling(int Level)
        {
            return _rogueSpellScaling[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly float[] _priestSpellScaling = new float[]
        {
             22.554979324340820f,   22.827085494995117f,   22.881505966186523f,   22.968580245971680f,   23.028444290161133f,
             23.087219238281250f,   23.134782791137695f,   23.179561614990234f,   23.573284149169922f,   23.915510177612305f,
             24.208955764770508f,   24.453620910644531f,   24.649507522583008f,   25.704942703247070f,   26.776060104370117f,
             27.852264404296875f,   28.922983169555664f,   29.977645874023438f,   31.005697250366211f,   31.996595382690430f,
             33.648586273193359f,   35.332496643066406f,   37.043430328369141f,   38.776435852050781f,   40.526527404785156f,
             42.288665771484375f,   44.057785034179688f,   45.828769683837891f,   47.596454620361328f,   49.355644226074219f,
             52.143978118896484f,   55.028682708740234f,   58.010242462158203f,   61.089149475097656f,   64.265876770019531f,
             67.540924072265625f,   70.914749145507812f,   74.387840270996094f,   77.960678100585938f,   81.633720397949219f,
             84.826446533203125f,   88.070350646972656f,   91.364173889160156f,   94.706649780273438f,   98.096534729003906f,
            101.532546997070312f,  105.013450622558594f,  108.537979125976562f,  112.104873657226562f,  115.712882995605469f,
            119.360733032226562f,  123.047203063964844f,  126.771003723144531f,  130.530899047851562f,  134.325637817382812f,
            138.153976440429688f,  142.014648437500000f,  291.812805175781250f,  328.420501708984375f,  336.625000000000000f,
            355.277374267578125f,  374.584777832031250f,  394.558074951171875f,  415.208099365234375f,  436.545593261718750f,
            458.581298828125000f,  481.325927734375000f,  504.790161132812500f,  528.984619140625000f,  553.919921875000000f,
            579.606689453125000f,  606.055358886718750f,  633.276550292968750f,  661.280639648437500f,  690.078063964843750f,
            719.679260253906250f,  750.094543457031250f,  781.334289550781250f,  813.408691406250000f,  846.328063964843750f,
            865.674682617187500f,  885.234558105468750f,  905.007263183593750f,  924.992187500000000f,  945.188842773437500f,
            965.596618652343750f,  986.215026855468750f, 1007.043518066406250f, 1028.081542968750000f, 1049.328369140625000f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestSpellScaling(int Level)
        {
            return _priestSpellScaling[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly float[] _deathKnightSpellScaling = new float[]
        {
              23.310699462890625f,   24.165054321289062f,   24.734624862670898f,   25.114337921142578f,   25.367479324340820f,
              25.873764038085938f,   27.155298233032227f,   28.436830520629883f,   29.718362808227539f,   30.999897003173828f,
              32.281429290771484f,   33.562961578369141f,   34.844493865966797f,   37.191482543945312f,   39.665225982666016f,
              42.265724182128906f,   44.992973327636719f,   47.846981048583984f,   50.827743530273438f,   53.935260772705078f,
              58.884620666503906f,   64.162399291992188f,   69.779998779296875f,   75.748825073242188f,   82.080299377441406f,
              88.785820007324219f,   95.876800537109375f,  103.364639282226562f,  111.260757446289062f,  119.576553344726562f,
             128.323440551757812f,  137.512817382812500f,  147.156097412109375f,  157.264694213867188f,  167.850006103515625f,
             178.923446655273438f,  190.496429443359375f,  202.580352783203125f,  215.186630249023438f,  228.326660156250000f,
             235.578002929687500f,  242.874938964843750f,  250.212371826171875f,  257.585235595703125f,  264.988494873046875f,
             272.417022705078125f,  279.865783691406250f,  287.329711914062500f,  294.803710937500000f,  302.282745361328125f,
             309.761688232421875f,  317.235534667968750f,  324.699188232421875f,  332.147583007812500f,  339.575622558593750f,
             346.978271484375000f,  354.350463867187500f,  361.687072753906250f,  402.533172607421875f,  409.958312988281250f,
             432.076416015625000f,  454.950958251953125f,  478.594604492187500f,  503.020050048828125f,  528.239990234375000f,
             554.267028808593750f,  581.113891601562500f,  608.793273925781250f,  637.317810058593750f,  666.700134277343750f,
             696.953063964843750f,  728.089111328125000f,  760.121093750000000f,  793.061584472656250f,  826.923339843750000f,
             861.718933105468750f,  897.461120605468750f,  934.162597656250000f,  971.835937500000000f, 1010.493896484375000f,
            1032.933593750000000f, 1055.626708984375000f, 1078.573486328125000f, 1101.773681640625000f, 1125.227416992187500f,
            1148.934570312500000f, 1172.895385742187500f, 1197.109619140625000f, 1221.577270507812500f, 1246.298583984375000f,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightSpellScaling(int Level)
        {
            return _deathKnightSpellScaling[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly float[] _shamanSpellScaling = new float[]
        {
              30.079257965087891f,   30.725482940673828f,   30.854728698730469f,   31.061519622802734f,   31.203689575195312f,
              31.343275070190430f,   31.456233978271484f,   31.562578201293945f,   32.648536682128906f,   33.310382843017578f,
              33.894912719726562f,   34.402122497558594f,   34.832012176513672f,   36.384574890136719f,   37.944423675537109f,
              39.497657775878906f,   41.030399322509766f,   42.528774261474609f,   43.978923797607422f,   45.366996765136719f,
              46.601268768310547f,   47.770656585693359f,   48.867374420166016f,   49.884174346923828f,   50.814350128173828f,
              51.651737213134766f,   52.390716552734375f,   53.026206970214844f,   53.553668975830078f,   53.969100952148438f,
              55.376571655273438f,   56.719345092773438f,   57.990756988525391f,   59.184143066406250f,   60.292850494384766f,
              61.310237884521484f,   62.229660034179688f,   63.044483184814453f,   63.748077392578125f,   64.333816528320312f,
              66.682327270507812f,   69.059020996093750f,   71.462669372558594f,   73.892021179199219f,   76.345832824707031f,
              78.822860717773438f,   81.321876525878906f,   83.841629028320312f,   86.380882263183594f,   88.938400268554688f,
              91.512939453125000f,   94.103263854980469f,   96.708137512207031f,   99.326332092285156f,  101.956596374511719f,
             104.597717285156250f,  107.248451232910156f,  219.815109252929688f,  246.449966430664062f,  251.970825195312500f,
             274.168457031250000f,  297.330535888671875f,  321.475555419921875f,  346.622009277343750f,  372.788391113281250f,
             399.993072509765625f,  428.254455566406250f,  457.590911865234375f,  488.020782470703125f,  519.562316894531250f,
             552.233825683593750f,  586.053466796875000f,  621.039489746093750f,  657.210021972656250f,  694.583251953125000f,
             733.177124023437500f,  773.009826660156250f,  814.099243164062500f,  856.463439941406250f,  900.120300292968750f,
             920.540039062500000f,  941.186950683593750f,  962.060852050781250f,  983.161254882812500f, 1004.487915039062500f,
            1026.040405273437500f, 1047.818359375000000f, 1069.821533203125000f, 1092.049438476562500f, 1114.501708984375000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanSpellScaling(int Level)
        {
            return _shamanSpellScaling[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly float[] _mageSpellScaling = new float[]
        {
             31.021398544311523f,   31.430574417114258f,   31.512409210205078f,   31.643346786499023f,   31.733366012573242f,
             31.821746826171875f,   31.893272399902344f,   31.960605621337891f,   32.571266174316406f,   33.067283630371094f,
             33.494693756103516f,   33.853504180908203f,   34.143707275390625f,   35.644485473632812f,   37.169345855712891f,
             38.703197479248047f,   40.230960845947266f,   41.737586975097656f,   43.208026885986328f,   44.627262115478516f,
             46.858093261718750f,   49.124362945556641f,   51.418891906738281f,   53.734500885009766f,   56.064014434814453f,
             58.400276184082031f,   60.736125946044922f,   63.064426422119141f,   65.378036499023438f,   67.669822692871094f,
             71.359878540039062f,   75.166130065917969f,   79.088447570800781f,   83.126686096191406f,   87.280715942382812f,
             91.550384521484375f,   95.935554504394531f,  100.436073303222656f,  105.051803588867188f,  109.782569885253906f,
            113.099868774414062f,  116.399642944335938f,  119.677139282226562f,  122.927642822265625f,  126.146400451660156f,
            129.328704833984375f,  132.469863891601562f,  135.565139770507812f,  138.609848022460938f,  141.599288940429688f,
            144.528778076171875f,  147.393646240234375f,  150.189224243164062f,  152.910827636718750f,  155.553817749023438f,
            158.113555908203125f,  160.585388183593750f,  325.929382324218750f,  362.339477539062500f,  366.620819091796875f,
            384.399383544921875f,  402.742858886718750f,  421.659851074218750f,  441.158843994140625f,  461.248321533203125f,
            481.936706542968750f,  503.232391357421875f,  525.143798828125000f,  547.679321289062500f,  570.847167968750000f,
            594.655700683593750f,  619.113220214843750f,  644.227905273437500f,  670.007995605468750f,  696.461669921875000f,
            723.597045898437500f,  751.422241210937500f,  779.945312500000000f,  809.174316406250000f,  839.117248535156250f,
            858.337585449218750f,  877.769592285156250f,  897.412719726562500f,  917.266418457031250f,  937.330078125000000f,
            957.603210449218750f,  978.085205078125000f,  998.775512695312500f, 1019.673522949218750f, 1040.778564453125000f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageSpellScaling(int Level)
        {
            return _mageSpellScaling[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly float[] _warlockSpellScaling = new float[]
        {
             32.221397399902344f,   32.726707458496094f,   32.827770233154297f,   32.989467620849609f,   33.100635528564453f,
             33.209781646728516f,   33.298110961914062f,   33.381263732910156f,   34.174514770507812f,   34.747943878173828f,
             35.246643066406250f,   35.670608520507812f,   36.019840240478516f,   37.597713470458984f,   39.193775177001953f,
             40.792808532714844f,   42.379611968994141f,   43.938995361328125f,   45.455783843994141f,   46.914817810058594f,
             48.894912719726562f,   50.876792907714844f,   52.852699279785156f,   54.815074920654297f,   56.756557464599609f,
             58.669990539550781f,   60.548412322998047f,   62.385059356689453f,   64.173370361328125f,   65.906990051269531f,
             68.958915710449219f,   72.068405151367188f,   75.232978820800781f,   78.450180053710938f,   81.717559814453125f,
             85.032661437988281f,   88.393020629882812f,   91.796195983886719f,   95.239738464355469f,   98.721191406250000f,
            101.445556640625000f,  104.135116577148438f,  106.785072326660156f,  109.390670776367188f,  111.947166442871094f,
            114.449790954589844f,  116.893806457519531f,  119.274497985839844f,  121.587112426757812f,  123.826927185058594f,
            125.989219665527344f,  128.069290161132812f,  130.062438964843750f,  131.963943481445312f,  133.769134521484375f,
            135.473312377929688f,  137.071807861328125f,  277.119934082031250f,  306.629364013671875f,  308.962493896484375f,
            328.700347900390625f,  349.191558837890625f,  370.449432373046875f,  392.487213134765625f,  415.318206787109375f,
            438.955535888671875f,  463.412414550781250f,  488.701965332031250f,  514.837280273437500f,  541.831420898437500f,
            569.697387695312500f,  598.448242187500000f,  628.096862792968750f,  658.656188964843750f,  690.139038085937500f,
            722.558410644531250f,  755.926940917968750f,  790.257446289062500f,  825.562622070312500f,  861.855224609375000f,
            881.517456054687500f,  901.397033691406250f,  921.493591308593750f,  941.806640625000000f,  962.335632324218750f,
            983.080078125000000f, 1004.039611816406250f, 1025.213500976562500f, 1046.601440429687500f, 1068.202880859375000f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockSpellScaling(int Level)
        {
            return _warlockSpellScaling[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly float[] _monkSpellScaling = new float[]
        {
              16.296300888061523f,   18.970312118530273f,   21.644325256347656f,   24.318338394165039f,   26.992349624633789f,
              27.143207550048828f,   27.265289306640625f,   27.380218505859375f,   28.597120285034180f,   29.269165039062500f,
              29.868688583374023f,   30.395690917968750f,   30.850173950195312f,   32.151695251464844f,   33.463394165039062f,
              34.772998809814453f,   36.068252563476562f,   37.336906433105469f,   38.566719055175781f,   39.745468139648438f,
              41.293998718261719f,   42.835113525390625f,   44.362510681152344f,   45.870082855224609f,   47.351921081542969f,
              48.802310943603516f,   50.215747833251953f,   51.586914062500000f,   52.910701751708984f,   54.182189941406250f,
              56.527206420898438f,   58.905834197998047f,   61.315624237060547f,   63.754119873046875f,   66.218879699707031f,
              68.707450866699219f,   71.217391967773438f,   73.746261596679688f,   76.291610717773438f,   78.851013183593750f,
              81.422027587890625f,   84.002212524414062f,   86.589141845703125f,   89.180389404296875f,   91.773513793945312f,
              94.366096496582031f,   96.955711364746094f,   99.539939880371094f,  102.116363525390625f,  104.682563781738281f,
             107.236106872558594f,  109.774612426757812f,  112.295646667480469f,  114.796821594238281f,  117.275718688964844f,
             119.729942321777344f,  122.157081604003906f,  249.109497070312500f,  277.898223876953125f,  282.633331298828125f,
             303.649841308593750f,  325.524841308593750f,  348.274230957031250f,  371.913879394531250f,  396.459655761718750f,
             421.927337646484375f,  448.332641601562500f,  475.691375732421875f,  504.019226074218750f,  533.331787109375000f,
             563.644836425781250f,  594.973815917968750f,  627.334350585937500f,  660.741943359375000f,  695.212097167968750f,
             730.760253906250000f,  767.401794433593750f,  805.152160644531250f,  844.026611328125000f,  884.040466308593750f,
             904.112976074218750f,  924.408264160156250f,  944.925842285156250f,  965.665405273437500f,  986.626403808593750f,
            1007.808593750000000f, 1029.211425781250000f, 1050.834472656250000f, 1072.677490234375000f, 1094.739746093750000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkSpellScaling(int Level)
        {
            return _monkSpellScaling[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly float[] _druidSpellScaling = new float[]
        {
              25.777118682861328f,   26.475526809692383f,   26.615209579467773f,   26.838701248168945f,   26.992349624633789f,
              27.143207550048828f,   27.265289306640625f,   27.380218505859375f,   28.597120285034180f,   29.269165039062500f,
              29.868688583374023f,   30.395690917968750f,   30.850173950195312f,   32.151695251464844f,   33.463394165039062f,
              34.772998809814453f,   36.068252563476562f,   37.336906433105469f,   38.566719055175781f,   39.745468139648438f,
              41.293998718261719f,   42.835113525390625f,   44.362510681152344f,   45.870082855224609f,   47.351921081542969f,
              48.802310943603516f,   50.215747833251953f,   51.586914062500000f,   52.910701751708984f,   54.182189941406250f,
              56.527206420898438f,   58.905834197998047f,   61.315624237060547f,   63.754119873046875f,   66.218879699707031f,
              68.707450866699219f,   71.217391967773438f,   73.746261596679688f,   76.291610717773438f,   78.851013183593750f,
              81.422027587890625f,   84.002212524414062f,   86.589141845703125f,   89.180389404296875f,   91.773513793945312f,
              94.366096496582031f,   96.955711364746094f,   99.539939880371094f,  102.116363525390625f,  104.682563781738281f,
             107.236106872558594f,  109.774612426757812f,  112.295646667480469f,  114.796821594238281f,  117.275718688964844f,
             119.729942321777344f,  122.157081604003906f,  249.109497070312500f,  277.898223876953125f,  282.633331298828125f,
             303.649841308593750f,  325.524841308593750f,  348.274230957031250f,  371.913879394531250f,  396.459655761718750f,
             421.927337646484375f,  448.332641601562500f,  475.691375732421875f,  504.019226074218750f,  533.331787109375000f,
             563.644836425781250f,  594.973815917968750f,  627.334350585937500f,  660.741943359375000f,  695.212097167968750f,
             730.760253906250000f,  767.401794433593750f,  805.152160644531250f,  844.026611328125000f,  884.040466308593750f,
             904.112976074218750f,  924.408264160156250f,  944.925842285156250f,  965.665405273437500f,  986.626464843750000f,
            1007.808593750000000f, 1029.211425781250000f, 1050.834472656250000f, 1072.677490234375000f, 1094.739746093750000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidSpellScaling(int Level)
        {
            return _druidSpellScaling[Level - 1];
        }
        #endregion

        #region Constant Scaling
        private static readonly float[] _constantSpellScaling = new float[]
        {
              3.000000000000000f,    3.000000000000000f,    4.000000000000000f,    4.000000000000000f,    5.000000000000000f,
              5.000000000000000f,    6.000000000000000f,    7.000000000000000f,    7.000000000000000f,    8.000000000000000f,
              8.000000000000000f,    9.000000000000000f,    9.000000000000000f,   10.000000000000000f,   11.000000000000000f,
             11.000000000000000f,   12.000000000000000f,   12.000000000000000f,   13.000000000000000f,   14.000000000000000f,
             14.000000000000000f,   15.000000000000000f,   15.000000000000000f,   16.000000000000000f,   17.000000000000000f,
             17.000000000000000f,   18.000000000000000f,   18.000000000000000f,   19.000000000000000f,   20.000000000000000f,
             20.000000000000000f,   21.000000000000000f,   21.000000000000000f,   22.000000000000000f,   23.000000000000000f,
             23.000000000000000f,   24.000000000000000f,   24.000000000000000f,   25.000000000000000f,   26.000000000000000f,
             26.000000000000000f,   27.000000000000000f,   27.000000000000000f,   28.000000000000000f,   28.000000000000000f,
             29.000000000000000f,   30.000000000000000f,   30.000000000000000f,   31.000000000000000f,   31.000000000000000f,
             32.000000000000000f,   33.000000000000000f,   33.000000000000000f,   34.000000000000000f,   34.000000000000000f,
             35.000000000000000f,   36.000000000000000f,   46.000000000000000f,   47.000000000000000f,   49.000000000000000f,
             51.000000000000000f,   53.000000000000000f,   54.000000000000000f,   55.000000000000000f,   57.000000000000000f,
             58.000000000000000f,   59.000000000000000f,   84.000000000000000f,   87.000000000000000f,   90.000000000000000f,
             93.000000000000000f,   97.000000000000000f,  101.000000000000000f,  104.000000000000000f,  108.000000000000000f,
            113.000000000000000f,  117.000000000000000f,  121.000000000000000f,  126.000000000000000f,  131.000000000000000f,
            308.000000000000000f,  368.000000000000000f,  435.000000000000000f,  473.000000000000000f,  509.000000000000000f,
            819.000000000000000f,  987.000000000000000f, 1189.000000000000000f, 1433.000000000000000f, 1710.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the character and returns the Constant Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ConstantSpellScaling(int Level)
        {
            return _constantSpellScaling[Level - 1];
        }
        #endregion
        #endregion

        #region Boss Armor
        public static float Get_BossArmor(int Level)
        {
            switch (Level)
            {
                case 80: return 9729f;
                case 81: return 10034f;
                case 82: return 10338f;
                case 83: return 10643f;
                case 84: return 10880f;
                case 85: return 11092f;
                case 86: return 11387f;
                case 87: return 11682f;
                case 88: return 11977f;
                case 89: return 20140f; // TODO: get Actual values; Guesses at this point
                case 90: return 22900f; 
                case 91: return 23546f;
                case 92: return 24191f;
                case 93: return 24835f; // Confirmed
                default:
                    if (Level < 80)
                        return (float)Math.Floor((Level / 80.0) * 9729);
                    else
                        return 0;
            }

        }
        #endregion

        #region Mana Per Spirit
        private static readonly float[] _manaPerSpirit = new float[]
        {
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
            0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,    0.225753650069237f,
       };
        /// <summary>
        /// Takes in the level of the Player and returns the Mana Per Spirit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ManaPerSpirit(int Level)
        {
            return _manaPerSpirit[Level - 1];
        }
        private static readonly float[] _mageManaPerSpirit = new float[]
        {
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
            0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,    0.056438412517309f,
       };
        /// <summary>
        /// Takes in the level of the Mage and returns the Mana Per Spirit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageManaPerSpirit(int Level)
        {
            return _mageManaPerSpirit[Level - 1];
        }
        #endregion

        #region HP Per Stamina
        private static readonly float[] _hPPerStamina = new float[]
        {
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f, 
            10.800000190734863f,   11.600000381469727f,   12.399999618530273f,   13.199999809265137f,   14.000000000000000f, 
            14.000000000000000f,   14.000000000000000f,   14.000000000000000f,   14.000000000000000f,   14.000000000000000f, 
       };
        /// <summary>
        /// Takes in the level of the Player and returns the HP per Stamina
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HPPerStamina(int Level)
        {
            return _hPPerStamina[Level - 1];
        }
         #endregion

        #region Base HP
        private static readonly float[] _baseHP = new float[]
        {
               83.000000000000000f,   114.000000000000000f,   141.000000000000000f,   163.000000000000000f,     200.000000000000000f,
              236.000000000000000f,   248.000000000000000f,   285.000000000000000f,   321.000000000000000f,     334.000000000000000f,
              370.000000000000000f,   407.000000000000000f,   419.000000000000000f,   455.000000000000000f,     492.000000000000000f,
              504.000000000000000f,   541.000000000000000f,   577.000000000000000f,   589.000000000000000f,     626.000000000000000f,
              662.000000000000000f,   674.000000000000000f,   711.000000000000000f,   738.000000000000000f,     774.000000000000000f,
              818.000000000000000f,   879.000000000000000f,   923.000000000000000f,   969.000000000000000f,    1042.000000000000000f,
             1098.000000000000000f,  1157.000000000000000f,  1218.000000000000000f,  1281.000000000000000f,    1347.000000000000000f,
             1415.000000000000000f,  1485.000000000000000f,  1558.000000000000000f,  1634.000000000000000f,    1712.000000000000000f,
             1792.000000000000000f,  1875.000000000000000f,  1960.000000000000000f,  2048.000000000000000f,    2138.000000000000000f,
             2230.000000000000000f,  2325.000000000000000f,  2423.000000000000000f,  2506.000000000000000f,    2627.000000000000000f,
             2754.000000000000000f,  2885.000000000000000f,  3022.000000000000000f,  3163.000000000000000f,    3309.000000000000000f,
             3460.000000000000000f,  3616.000000000000000f,  3680.000000000000000f,  3743.000000000000000f,    3807.000000000000000f,
             3871.000000000000000f,  3934.000000000000000f,  3998.000000000000000f,  4062.000000000000000f,    4126.000000000000000f,
             4189.000000000000000f,  4253.000000000000000f,  4317.000000000000000f,  4380.000000000000000f,    4444.000000000000000f,
             4720.000000000000000f,  5013.000000000000000f,  5325.000000000000000f,  5656.000000000000000f,    6008.000000000000000f,
             6381.000000000000000f,  6778.000000000000000f,  7199.000000000000000f,  7646.000000000000000f,    8121.000000000000000f,
            11349.000000000000000f, 15860.000000000000000f, 22164.000000000000000f,  30974.000000000000000f,  43285.000000000000000f,
            55250.000000000000000f, 70523.000000000000000f, 90017.000000000000000f, 114901.000000000000000f, 146663.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Player and returns the base HP amount
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float BaseHP(int Level)
        {
            return _baseHP[Level - 1];
        }
        #endregion

        #region Base Mana
        #region Warrior
        private static readonly float[] _warriorBaseMana = new float[]
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorBaseMana(int Level)
        {
            return _warriorBaseMana[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly float[] _paladinBaseMana = new float[]
        {
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               46.000000000000000f,    52.000000000000000f,    58.000000000000000f,    64.000000000000000f,    70.000000000000000f,
               80.000000000000000f,    90.000000000000000f,   100.000000000000000f,   110.000000000000000f,   120.000000000000000f,
              130.000000000000000f,   140.000000000000000f,   150.000000000000000f,   160.000000000000000f,   170.000000000000000f,
              180.000000000000000f,   200.000000000000000f,   220.000000000000000f,   240.000000000000000f,   260.000000000000000f,
              280.000000000000000f,   300.000000000000000f,   320.000000000000000f,   340.000000000000000f,   360.000000000000000f,
              380.000000000000000f,   400.000000000000000f,   420.000000000000000f,   440.000000000000000f,   460.000000000000000f,
              480.000000000000000f,   500.000000000000000f,   520.000000000000000f,   540.000000000000000f,   560.000000000000000f,
              580.000000000000000f,   600.000000000000000f,   620.000000000000000f,   640.000000000000000f,   660.000000000000000f,
              680.000000000000000f,   700.000000000000000f,   720.000000000000000f,   740.000000000000000f,   760.000000000000000f,
              780.000000000000000f,   800.000000000000000f,   820.000000000000000f,   840.000000000000000f,   880.000000000000000f,
              920.000000000000000f,   980.000000000000000f,  1040.000000000000000f,  1120.000000000000000f,  1200.000000000000000f,
             1280.000000000000000f,  1400.000000000000000f,  1520.000000000000000f,  1640.000000000000000f,  1760.000000000000000f,
             1880.000000000000000f,  2000.000000000000000f,  2200.000000000000000f,  2400.000000000000000f,  2600.000000000000000f,
             2800.000000000000000f,  3000.000000000000000f,  3200.000000000000000f,  3400.000000000000000f,  3600.000000000000000f,
             5000.000000000000000f,  8000.000000000000000f, 12000.000000000000000f, 16000.000000000000000f, 20000.000000000000000f,
            24000.000000000000000f, 32000.000000000000000f, 40000.000000000000000f, 50000.000000000000000f, 60000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinBaseMana(int Level)
        {
            return _paladinBaseMana[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly float[] _hunterBaseMana = new float[]
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterBaseMana(int Level)
        {
            return _hunterBaseMana[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly float[] _rogueBaseMana = new float[]
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueBaseMana(int Level)
        {
            return _rogueBaseMana[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly float[] _priestBaseMana = new float[]
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestBaseMana(int Level)
        {
            return _priestBaseMana[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly float[] _deathKnightBaseMana = new float[]
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
       };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightBaseMana(int Level)
        {
            return _deathKnightBaseMana[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly float[] _shamanBaseMana = new float[]
        {
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               46.000000000000000f,    52.000000000000000f,    58.000000000000000f,    64.000000000000000f,    70.000000000000000f,
               80.000000000000000f,    90.000000000000000f,   100.000000000000000f,   110.000000000000000f,   120.000000000000000f,
              130.000000000000000f,   140.000000000000000f,   150.000000000000000f,   160.000000000000000f,   170.000000000000000f,
              180.000000000000000f,   200.000000000000000f,   220.000000000000000f,   240.000000000000000f,   260.000000000000000f,
              280.000000000000000f,   300.000000000000000f,   320.000000000000000f,   340.000000000000000f,   360.000000000000000f,
              380.000000000000000f,   400.000000000000000f,   420.000000000000000f,   440.000000000000000f,   460.000000000000000f,
              480.000000000000000f,   500.000000000000000f,   520.000000000000000f,   540.000000000000000f,   560.000000000000000f,
              580.000000000000000f,   600.000000000000000f,   620.000000000000000f,   640.000000000000000f,   660.000000000000000f,
              680.000000000000000f,   700.000000000000000f,   720.000000000000000f,   740.000000000000000f,   760.000000000000000f,
              780.000000000000000f,   800.000000000000000f,   820.000000000000000f,   840.000000000000000f,   880.000000000000000f,
              920.000000000000000f,   980.000000000000000f,  1040.000000000000000f,  1120.000000000000000f,  1200.000000000000000f,
             1280.000000000000000f,  1400.000000000000000f,  1520.000000000000000f,  1640.000000000000000f,  1760.000000000000000f,
             1880.000000000000000f,  2000.000000000000000f,  2200.000000000000000f,  2400.000000000000000f,  2600.000000000000000f,
             2800.000000000000000f,  3000.000000000000000f,  3200.000000000000000f,  3400.000000000000000f,  3600.000000000000000f,
             5000.000000000000000f,  8000.000000000000000f, 12000.000000000000000f, 16000.000000000000000f, 20000.000000000000000f,
            24000.000000000000000f, 32000.000000000000000f, 40000.000000000000000f, 50000.000000000000000f, 60000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanBaseMana(int Level)
        {
            return _shamanBaseMana[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly float[] _mageBaseMana = new float[]
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageBaseMana(int Level)
        {
            return _mageBaseMana[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly float[] _warlockBaseMana = new float[]
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockBaseMana(int Level)
        {
            return _warlockBaseMana[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly float[] _monkBaseMana = new float[]
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkBaseMana(int Level)
        {
            return _monkBaseMana[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly float[] _druidBaseMana = new float[]
        {
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,    40.000000000000000f,
               46.000000000000000f,    52.000000000000000f,    58.000000000000000f,    64.000000000000000f,    70.000000000000000f,
               80.000000000000000f,    90.000000000000000f,   100.000000000000000f,   110.000000000000000f,   120.000000000000000f,
              130.000000000000000f,   140.000000000000000f,   150.000000000000000f,   160.000000000000000f,   170.000000000000000f,
              180.000000000000000f,   200.000000000000000f,   220.000000000000000f,   240.000000000000000f,   260.000000000000000f,
              280.000000000000000f,   300.000000000000000f,   320.000000000000000f,   340.000000000000000f,   360.000000000000000f,
              380.000000000000000f,   400.000000000000000f,   420.000000000000000f,   440.000000000000000f,   460.000000000000000f,
              480.000000000000000f,   500.000000000000000f,   520.000000000000000f,   540.000000000000000f,   560.000000000000000f,
              580.000000000000000f,   600.000000000000000f,   620.000000000000000f,   640.000000000000000f,   660.000000000000000f,
              680.000000000000000f,   700.000000000000000f,   720.000000000000000f,   740.000000000000000f,   760.000000000000000f,
              780.000000000000000f,   800.000000000000000f,   820.000000000000000f,   840.000000000000000f,   880.000000000000000f,
              920.000000000000000f,   980.000000000000000f,  1040.000000000000000f,  1120.000000000000000f,  1200.000000000000000f,
             1280.000000000000000f,  1400.000000000000000f,  1520.000000000000000f,  1640.000000000000000f,  1760.000000000000000f,
             1880.000000000000000f,  2000.000000000000000f,  2200.000000000000000f,  2400.000000000000000f,  2600.000000000000000f,
             2800.000000000000000f,  3000.000000000000000f,  3200.000000000000000f,  3400.000000000000000f,  3600.000000000000000f,
             5000.000000000000000f,  8000.000000000000000f, 12000.000000000000000f, 16000.000000000000000f, 20000.000000000000000f,
            24000.000000000000000f, 32000.000000000000000f, 40000.000000000000000f, 50000.000000000000000f, 60000.000000000000000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidBaseMana(int Level)
        {
            return _druidBaseMana[Level - 1];
        }
        #endregion
        #endregion

        #region Alternate Power Size
        private static readonly float[] _alternatePowerSize = new float[]
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the character and returns the Alternate Power Size. This is used for classes that don't
        /// use Mana, Energy, Rage, Focus, or Runic Power. Ex: Warlock Destruction and Demonology bars
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float AlternatePowerSize(int Level)
        {
            return _alternatePowerSize[Level - 1];
        }
        #endregion

        #region Class Stats By Level
        //      Str   Agi Sta Int Spi
        #region Warrior
        private static readonly int[,] _warriorClassStats = new int[90,5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 }, 
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 100,   60,   90,   10,   25 }, // 60
            { 102,   61,   92,   10,   26 },
            { 105,   63,   94,   10,   26 },
            { 107,   64,   97,   11,   27 },
            { 110,   66,   99,   11,   27 },
            { 112,   68,  101,   11,   28 }, // 65
            { 115,   69,  103,   12,   29 },
            { 117,   71,  106,   12,   29 },
            { 120,   72,  108,   12,   30 },
            { 122,   74,  110,   12,   31 },
            { 125,   76,  113,   13,   31 }, // 70
            { 128,   77,  115,   13,   32 },
            { 130,   79,  118,   13,   33 },
            { 133,   81,  120,   13,   34 },
            { 136,   82,  123,   14,   34 },
            { 139,   84,  125,   14,   35 }, // 75
            { 142,   86,  128,   14,   36 },
            { 145,   88,  131,   15,   37 },
            { 148,   89,  133,   15,   37 },
            { 151,   91,  136,   15,   38 },
            { 154,   93,  139,   16,   39 }, // 80
            { 157,   95,  141,   16,   40 },
            { 160,   97,  144,   16,   40 },
            { 163,   99,  147,   16,   41 },
            { 166,  101,  150,   17,   42 },
            { 169,  103,  153,   17,   43 }, // 85
            { 173,  105,  156,   17,   44 },
            { 177,  107,  159,   18,   45 }, // ** Fix
            { 180,  109,  162,   18,   45 }, // ** Fix
            { 183,  111,  165,   18,   46 }, // ** Fix
            { 186,  113,  168,   19,   47 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo WarriorClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_warriorClassStats[Level - 1,0],_warriorClassStats[Level - 1,1],_warriorClassStats[Level - 1,2],_warriorClassStats[Level - 1,3],_warriorClassStats[Level - 1,4]);
            return stat;
        }
        #endregion

        #region Paladin
        private static readonly int[,] _paladinClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  85,   45,   80,   50,   55 }, // 60
            {  87,   46,   82,   51,   56 },
            {  89,   47,   84,   52,   58 },
            {  91,   48,   86,   54,   59 },
            {  93,   49,   88,   55,   60 },
            {  95,   51,   90,   56,   62 }, // 65
            {  98,   52,   92,   58,   63 },
            { 100,   53,   94,   59,   65 },
            { 102,   54,   96,   60,   66 },
            { 104,   55,   98,   62,   67 },
            { 106,   57,  100,   63,   69 }, // 70
            { 109,   58,  102,   64,   70 },
            { 111,   59,  105,   66,   72 },
            { 113,   60,  107,   67,   74 },
            { 116,   62,  109,   69,   75 },
            { 118,   63,  111,   70,   77 }, // 75
            { 121,   64,  114,   72,   78 },
            { 123,   66,  116,   73,   80 },
            { 126,   67,  118,   75,   82 },
            { 128,   68,  121,   76,   83 },
            { 131,   70,  123,   78,   85 }, // 80
            { 133,   71,  126,   79,   87 },
            { 136,   73,  128,   81,   88 },
            { 139,   74,  131,   82,   90 },
            { 142,   76,  133,   84,   92 },
            { 144,   77,  136,   86,   94 }, // 85
            { 147,   79,  139,   87,   95 },
            { 150,   80,  141,   89,   97 },
            { 153,   82,  144,   91,   99 },
            { 155,   83,  146,   93,  101 },
            { 158,   85,  149,   94,  103 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo PaladinClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_paladinClassStats[Level - 1, 0], _paladinClassStats[Level - 1, 1], _paladinClassStats[Level - 1, 2], _paladinClassStats[Level - 1, 3], _paladinClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Hunter
        private static readonly int[,] _hunterClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  35,  105,   70,   45,   50 }, // 60
            {  36,  107,   72,   46,   51 },
            {  37,  110,   73,   47,   52 },
            {  38,  113,   75,   48,   54 },
            {  38,  115,   77,   49,   55 },
            {  39,  118,   79,   51,   56 }, // 65
            {  40,  120,   80,   52,   57 },
            {  41,  123,   82,   53,   59 },
            {  42,  126,   84,   54,   60 },
            {  43,  129,   86,   55,   61 },
            {  44,  131,   88,   57,   63 }, // 70
            {  45,  134,   90,   58,   64 },
            {  46,  137,   92,   59,   65 },
            {  47,  140,   94,   60,   67 },
            {  48,  143,   96,   62,   68 },
            {  49,  146,   98,   63,   70 }, // 75
            {  50,  149,  100,   64,   71 },
            {  51,  152,  102,   66,   73 },
            {  52,  155,  104,   67,   74 },
            {  53,  158,  106,   68,   76 },
            {  54,  161,  108,   70,   77 }, // 80
            {  55,  165,  110,   71,   79 },
            {  57,  168,  113,   73,   80 },
            {  58,  171,  115,   74,   82 },
            {  59,  175,  117,   76,   83 },
            {  60,  178,  119,   77,   85 }, // 85
            {  61,  181,  122,   79,   87 },
            {  62,  185,  124,   80,   88 },
            {  64,  188,  126,   82,   90 },
            {  65,  192,  129,   84,   92 },
            {  66,  196,  131,   85,   93 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo HunterClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_hunterClassStats[Level - 1, 0], _hunterClassStats[Level - 1, 1], _hunterClassStats[Level - 1, 2], _hunterClassStats[Level - 1, 3], _hunterClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Rogue
        private static readonly int[,] _rogueClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  60,  110,   55,   15,   30 }, // 60
            {  61,  113,   56,   15,   31 },
            {  63,  115,   58,   16,   31 },
            {  64,  118,   59,   16,   32 },
            {  66,  121,   60,   16,   33 },
            {  67,  123,   62,   17,   34 }, // 65
            {  69,  126,   63,   17,   35 },
            {  70,  129,   65,   18,   35 },
            {  72,  132,   66,   18,   36 },
            {  74,  135,   67,   18,   37 },
            {  75,  138,   69,   19,   38 }, // 70
            {  77,  141,   70,   19,   39 },
            {  79,  144,   72,   20,   39 },
            {  80,  147,   74,   20,   40 },
            {  82,  150,   75,   21,   41 },
            {  84,  153,   77,   21,   42 }, // 75
            {  85,  156,   78,   21,   43 },
            {  87,  159,   80,   22,   44 },
            {  89,  163,   82,   22,   45 },
            {  91,  166,   83,   23,   46 },
            {  93,  169,   85,   23,   47 }, // 80
            {  94,  173,   87,   24,   48 },
            {  96,  176,   88,   24,   48 },
            {  98,  179,   90,   25,   49 },
            { 100,  183,   92,   25,   50 },
            { 102,  186,   94,   26,   51 }, // 85
            { 104,  190,   95,   26,   52 },
            { 106,  193,   97,   27,   53 }, // ** Fix
            { 108,  197,   99,   27,   55 },
            { 110,  201,  101,   28,   56 },
            { 112,  205,  103,   28,   57 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo RogueClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_rogueClassStats[Level - 1, 0], _rogueClassStats[Level - 1, 1], _rogueClassStats[Level - 1, 2], _rogueClassStats[Level - 1, 3], _rogueClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Priest
        private static readonly int[,] _priestClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  15,   20,   30,  100,  105 }, // 60
            {  15,   20,   31,  102,  107 },
            {  16,   21,   31,  105,  110 },
            {  16,   21,   32,  107,  113 },
            {  16,   22,   33,  110,  115 },
            {  17,   23,   34,  112,  118 }, // 65
            {  17,   23,   35,  115,  120 },
            {  18,   24,   35,  117,  123 },
            {  18,   24,   36,  120,  126},
            {  18,   25,   37,  123,  129 },
            {  19,   25,   38,  125,  131 }, // 70
            {  19,   26,   39,  128,  134 },
            {  20,   26,   39,  131,  137 },
            {  20,   27,   40,  134,  140 },
            {  21,   27,   41,  136,  143 },
            {  21,   28,   42,  139,  146 }, // 75
            {  21,   29,   43,  142,  149 },
            {  22,   29,   44,  145,  152 },
            {  22,   30,   45,  148,  155 },
            {  23,   30,   46,  151,  158 },
            {  23,   31,   47,  154,  161 }, // 80
            {  24,   32,   48,  157,  165 },
            {  24,   32,   48,  161,  168 },
            {  25,   33,   49,  164,  171 },
            {  25,   34,   50,  167,  175 },
            {  26,   34,   51,  170,  178 }, // 85
            {  26,   35,   52,  173,  181 },
            {  27,   36,   53,  176,  185 },
            {  27,   36,   55,  179,  188 },
            {  28,   37,   56,  182,  192 },
            {  28,   38,   57,  187,  196 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo PriestClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_priestClassStats[Level - 1, 0], _priestClassStats[Level - 1, 1], _priestClassStats[Level - 1, 2], _priestClassStats[Level - 1, 3], _priestClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Death Knight
        private static readonly int[,] _deathKnightClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 100,   60,   90,   10,   25 }, // 60
            { 102,   61,   92,   10,   26 },
            { 105,   63,   94,   10,   26 },
            { 107,   64,   97,   11,   27 },
            { 110,   66,   99,   11,   27 },
            { 113,   67,  101,   11,   28 }, // 65
            { 115,   69,  104,   11,   29 },
            { 118,   70,  106,   12,   29 },
            { 120,   72,  108,   12,   30 },
            { 123,   73,  111,   12,   31 },
            { 126,   75,  113,   12,   31 }, // 70
            { 129,   77,  116,   13,   32 },
            { 131,   78,  118,   13,   33 },
            { 134,   80,  121,   13,   34 },
            { 137,   82,  123,   13,   34 },
            { 140,   83,  126,   14,   35 }, // 75
            { 143,   85,  129,   14,   36 },
            { 146,   87,  131,   14,   37 },
            { 149,   88,  134,   14,   37 },
            { 152,   90,  137,   15,   38 },
            { 155,   92,  140,   15,   39 }, // 80
            { 158,   94,  143,   15,   40 },
            { 162,   96,  145,   16,   40 },
            { 165,   98,  148,   16,   41 },
            { 168,  100,  151,   16,   42 },
            { 171,  101,  154,   16,   43 }, // 85
            { 175,  103,  157,   17,   44 },
            { 178,  105,  160,   17,   45 },
            { 182,  107,  164,   17,   47 },
            { 185,  109,  168,   18,   48 },
            { 189,  111,  170,   18,   49 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo DeathKnightClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_deathKnightClassStats[Level - 1, 0], _deathKnightClassStats[Level - 1, 1], _deathKnightClassStats[Level - 1, 2], _deathKnightClassStats[Level - 1, 3], _deathKnightClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Shaman
        private static readonly int[,] _shamanClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  65,   35,   75,   70,   80 }, // 60
            {  67,   36,   77,   72,   82 },
            {  68,   37,   79,   73,   84 },
            {  70,   38,   80,   75,   86 },
            {  71,   38,   82,   77,   88 },
            {  73,   39,   84,   79,   90 }, // 65
            {  75,   40,   86,   80,   92 },
            {  76,   41,   88,   82,   94 },
            {  78,   42,   90,   84,   96 },
            {  80,   43,   92,   86,   98 },
            {  82,   44,   94,   88,  100 }, // 70
            {  83,   45,   96,   90,  102 },
            {  85,   46,   98,   92,  105 },
            {  87,   47,  100,   94,  107 },
            {  89,   48,  103,   96,  109 },
            {  91,   49,  105,   98,  111 }, // 75
            {  93,   50,  107,  100,  114 },
            {  94,   51,  109,  102,  116 },
            {  96,   52,  111,  104,  118 },
            {  98,   53,  114,  106,  121 },
            { 100,   54,  116,  108,  123 }, // 80
            { 102,   55,  118,  110,  126 },
            { 104,   57,  121,  113,  128 },
            { 107,   58,  123,  115,  131 },
            { 109,   59,  125,  117,  133 },
            { 111,   60,  128,  119,  136 }, // 85
            { 113,   61,  130,  122,  138 },
            { 115,   62,  132,  124,  140 }, // ** Fix
            { 117,   63,  135,  126,  143 }, // ** Fix
            { 119,   64,  138,  129,  146 }, // ** Fix
            { 122,   66,  141,  131,  149 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo ShamanClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_shamanClassStats[Level - 1, 0], _shamanClassStats[Level - 1, 1], _shamanClassStats[Level - 1, 2], _shamanClassStats[Level - 1, 3], _shamanClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Mage
        private static readonly int[,] _mageClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  10,   15,   25,  105,  100 }, // 60
            {  10,   15,   26,  107,  102 },
            {  10,   16,   26,  110,  105 },
            {  11,   16,   27,  113,  107 },
            {  11,   16,   27,  115,  110 },
            {  11,   17,   28,  118,  112 }, // 65
            {  12,   17,   29,  120,  115 },
            {  12,   18,   29,  123,  117 },
            {  12,   18,   30,  126,  120 },
            {  12,   18,   31,  129,  123 },
            {  13,   19,   31,  131,  125 }, // 70
            {  13,   19,   32,  134,  128 },
            {  13,   20,   33,  137,  131 },
            {  13,   20,   34,  140,  134 },
            {  14,   21,   34,  143,  136 },
            {  14,   21,   35,  146,  139 }, // 75
            {  14,   21,   36,  149,  142 },
            {  15,   22,   37,  152,  145 },
            {  15,   22,   37,  155,  148 },
            {  15,   23,   38,  158,  151 },
            {  16,   23,   39,  161,  154 }, // 80
            {  16,   24,   40,  165,  157 },
            {  16,   24,   40,  169,  160 },
            {  16,   25,   41,  172,  164 },
            {  17,   25,   42,  175,  167 },
            {  17,   26,   43,  178,  170 }, // 85
            {  17,   26,   44,  181,  173 },
            {  18,   27,   45,  185,  177 },
            {  18,   27,   45,  188,  180 },
            {  19,   28,   46,  192,  183 },
            {  19,   28,   47,  195,  187 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo MageClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_mageClassStats[Level - 1, 0], _mageClassStats[Level - 1, 1], _mageClassStats[Level - 1, 2], _mageClassStats[Level - 1, 3], _mageClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Warlock
        private static readonly int[,] _warlockClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  25,   30,   45,   90,   95 }, // 60
            {  26,   31,   46,   92,   97 },
            {  26,   31,   47,   94,  100 },
            {  27,   32,   48,   97,  102 },
            {  27,   33,   49,   99,  104 },
            {  28,   34,   51,  101,  107 }, // 65
            {  29,   35,   52,  103,  109 },
            {  29,   35,   53,  106,  112 },
            {  30,   36,   54,  108,  114 },
            {  31,   37,   55,  110,  116 },
            {  31,   38,   56,  113,  119 }, // 70
            {  32,   39,   58,  115,  122 },
            {  33,   39,   59,  118,  124 },
            {  34,   40,   60,  120,  127 },
            {  34,   41,   61,  123,  130 },
            {  35,   42,   63,  125,  132 }, // 75
            {  36,   43,   64,  128,  135 },
            {  37,   44,   65,  131,  138 },
            {  37,   45,   67,  133,  141 },
            {  38,   46,   68,  136,  144 },
            {  39,   47,   69,  139,  146 }, // 80
            {  40,   48,   71,  141,  149 },
            {  40,   48,   72,  144,  152 },
            {  41,   49,   74,  147,  155 },
            {  42,   50,   75,  150,  158 },
            {  43,   51,   76,  153,  161 }, // 85
            {  44,   52,   78,  156,  165 },
            {  45,   53,   79,  159,  168 },
            {  45,   55,   81,  162,  171 },
            {  46,   56,   82,  165,  174 },
            {  47,   57,   84,  168,  178 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo WarlockClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_warlockClassStats[Level - 1, 0], _warlockClassStats[Level - 1, 1], _warlockClassStats[Level - 1, 2], _warlockClassStats[Level - 1, 3], _warlockClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Monk
        private static readonly int[,] _monkClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 60
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 65
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 70
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 75
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 80
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  68,  85, 86, 135, 154 }, // 85
            {  69,  87, 88, 138, 157 },
            {  70,  88, 90, 140, 160 }, // ** Fix
            {  71,  89, 91, 143, 163 }, // ** Fix
            {  72,  91, 92, 146, 166 }, // ** Fix
            {  74,  93, 93, 149, 170 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo MonkClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_monkClassStats[Level - 1, 0], _monkClassStats[Level - 1, 1], _monkClassStats[Level - 1, 2], _monkClassStats[Level - 1, 3], _monkClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion

        #region Druid
        private static readonly int[,] _druidClassStats = new int[90, 5]
        {
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 5
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 10
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 15
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 20
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 25
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 30
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 35
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 40
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 45
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 50
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 }, // 55
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            { 0,  0,  0,  0,  0 },
            {  45,   40,   50,   80,   90 }, // 60
            {  46,   41,   51,   82,   92 },
            {  47,   42,   52,   84,   94 },
            {  48,   43,   54,   86,   97 },
            {  49,   44,   55,   88,   99 },
            {  51,   45,   56,   90,  101 }, // 65
            {  52,   46,   58,   92,  103 },
            {  53,   47,   59,   94,  106 },
            {  54,   48,   60,   96,  108 },
            {  55,   49,   62,   98,  110 },
            {  56,   50,   63,  100,  113 }, // 70
            {  58,   51,   64,  102,  115 },
            {  59,   53,   66,  105,  118 },
            {  60,   54,   67,  107,  120 },
            {  61,   55,   69,  109,  123 },
            {  63,   56,   70,  111,  125 }, // 75
            {  64,   57,   72,  114,  128 },
            {  65,   58,   73,  116,  131 },
            {  67,   60,   75,  118,  133 },
            {  68,   61,   76,  121,  136 },
            {  69,   62,   78,  123,  139 }, // 80
            {  71,   63,   79,  126,  141 },
            {  72,   65,   81,  128,  144 },
            {  74,   66,   82,  130,  147 },
            {  75,   67,   84,  133,  150 },
            {  76,   69,   86,  136,  153 }, // 85
            {  78,   70,   87,  138,  156 },
            {  79,   71,   90,  140,  159 }, // ** Fix
            {  80,   72,   93,  143,  162 }, // ** Fix
            {  82,   74,   96,  146,  165 }, // ** Fix
            {  84,   75,   99,  149,  168 }, // 90
        };
        /// <summary>
        /// Takes in the level of the Druid and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo DruidClassStats(int Level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_druidClassStats[Level - 1, 0], _druidClassStats[Level - 1, 1], _druidClassStats[Level - 1, 2], _druidClassStats[Level - 1, 3], _druidClassStats[Level - 1, 4]);
            return stat;
        }
        #endregion
        #endregion

        #region Race Stats
        private static readonly int[,] _raceStats = new int[27, 5]
        {
            {  0,  0,  0,  0,  0 }, // No Race
            { 20, 20, 20, 20, 20 }, // Human
            { 23, 17, 21, 17, 22 }, // Orc
            { 25, 16, 21, 19, 19 }, // Dwarf
            { 16, 24, 20, 20, 20 }, // Night Elf
            { 19, 18, 20, 18, 25 }, // Undead
            { 25, 16, 21, 16, 22 }, // Tauren
            { 15, 22, 20, 23, 20 }, // Gnome
            { 21, 22, 20, 16, 21 }, // Troll
            { 17, 22, 20, 23, 18 }, // Goblin
            { 17, 22, 20, 23, 18 }, // Blood Elf
            { 21, 17, 20, 20, 22 }, // Draenei
            {  0,  0,  0,  0,  0 }, // Fel Orc
            {  0,  0,  0,  0,  0 }, // Naga
            {  0,  0,  0,  0,  0 }, // Broken
            {  0,  0,  0,  0,  0 }, // Skeleton
            {  0,  0,  0,  0,  0 }, // Vrykul
            {  0,  0,  0,  0,  0 }, // Tuskarr
            {  0,  0,  0,  0,  0 }, // Forest Troll
            {  0,  0,  0,  0,  0 }, // Taunka
            {  0,  0,  0,  0,  0 }, // Skeleton
            {  0,  0,  0,  0,  0 }, // Ice Troll
            { 23, 22, 20, 16, 19 }, // Worgen
            {  0,  0,  0,  0,  0 }, // Gilnean
            { 20, 18, 21, 19, 22 }, // Pandaren
            { 20, 18, 21, 19, 22 }, // Pandaren - Alliance
            { 20, 18, 21, 19, 22 }, // Pandaren - Horde
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo RaceStats(CharacterRace race)
        {
            int raceID = 0;
            switch (race)
            {
                case CharacterRace.Human:               raceID = 1; break;
                case CharacterRace.Orc:                 raceID = 2; break;
                case CharacterRace.Dwarf:               raceID = 3; break;
                case CharacterRace.NightElf:            raceID = 4; break;
                case CharacterRace.Undead:              raceID = 5; break;
                case CharacterRace.Tauren:              raceID = 6; break;
                case CharacterRace.Gnome:               raceID = 7; break;
                case CharacterRace.Troll:               raceID = 8; break;
                case CharacterRace.Goblin:              raceID = 9; break;
                case CharacterRace.BloodElf:            raceID = 10; break;
                case CharacterRace.Draenei:             raceID = 11; break;
                case CharacterRace.Worgen:              raceID = 22; break;
                case CharacterRace.PandarenAlliance:    raceID = 25; break;
                case CharacterRace.PandarenHorde:       raceID = 26; break;
                default: raceID = 0; break;
            }
            BaseCombatStatInfo stat = new BaseCombatStatInfo(_raceStats[raceID, 0], _raceStats[raceID, 1], _raceStats[raceID, 2], _raceStats[raceID, 3], _raceStats[raceID, 4]);
            return stat;
        }

        public static BaseCombatStatInfo TotalBaseStats(CharacterRace race, CharacterClass charClass, int level)
        {
            BaseCombatStatInfo stat = RaceStats(race);
            switch (charClass)
            {
                case CharacterClass.Warrior: stat.Accumulate(WarriorClassStats(level)); break;
                case CharacterClass.Paladin: stat.Accumulate(PaladinClassStats(level)); break;
                case CharacterClass.Hunter: stat.Accumulate(HunterClassStats(level)); break;
                case CharacterClass.Rogue: stat.Accumulate(RogueClassStats(level)); break;
                case CharacterClass.Priest: stat.Accumulate(PriestClassStats(level)); break;
                case CharacterClass.DeathKnight: stat.Accumulate(DeathKnightClassStats(level)); break;
                case CharacterClass.Shaman: stat.Accumulate(ShamanClassStats(level)); break;
                case CharacterClass.Mage: stat.Accumulate(MageClassStats(level)); break;
                case CharacterClass.Warlock: stat.Accumulate(WarlockClassStats(level)); break;
                case CharacterClass.Monk: stat.Accumulate(MonkClassStats(level)); break;
                case CharacterClass.Druid: stat.Accumulate(DruidClassStats(level)); break;
            }
            return stat;
        }
        #endregion

        #region Touch of the Grave Scaling
        private static readonly float[] _touchOfTheGraveScaling = new float[]
        {
              3,    3,    4,    4,    5,
              5,    6,    7,    7,    8,
              8,    9,    9,   10,   11,
             11,   12,   12,   13,   14,
             15,   15,   15,   16,   17,
             17,   18,   18,   19,   20,
             20,   21,   21,   22,   23,
             23,   24,   24,   25,   26,
             26,   27,   27,   28,   28,
             29,   30,   30,   31,   31,
             32,   33,   33,   34,   34,
             35,   36,   46,   47,   49,
             51,   53,   54,   55,   57,
             58,   59,   84,   87,   90,
             93,   97,  101,  104,  108,
            113,  117,  121,  126,  131,
            308,  368,  435,  473,  509,
            819,  987, 1189, 1433, 1710,
        };
        /// <summary>
        /// Takes in the level of the Undead and returns the Touch of the Grave Scaling
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float TouchOfTheGraveScaling(int Level)
        {
            return _touchOfTheGraveScaling[Level - 1];
        }

        public static float TouchOfTheGraveMultiplier = 8.0000000000f;
        public static float TouchOfTheGraveDelta = 0.1500000060f;
        #endregion
    }

    public class BaseCombatStatInfo
    {
        public int Strength = 0;
        public int Agility = 0;
        public int Stamina = 0;
        public int Intellect = 0;
        public int Spirit = 0;

        public BaseCombatStatInfo(int strength, int agility, int stamina, int intellect, int spirit)
        {
            Strength = strength;
            Agility = agility;
            Stamina = stamina;
            Intellect = intellect;
            Spirit = spirit;
        }

        public BaseCombatStatInfo(int[] stats)
        {
            Strength = stats[0];
            Agility = stats[1];
            Stamina = stats[2];
            Intellect = stats[3];
            Spirit = stats[4];
        }

        public void Accumulate(BaseCombatStatInfo stat)
        {
            Strength += stat.Strength;
            Agility += stat.Agility;
            Stamina += stat.Stamina;
            Intellect += stat.Intellect;
            Spirit += stat.Spirit;
        }
    }
}